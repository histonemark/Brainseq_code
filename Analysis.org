#+TITLE: Analysis
#+PROPERTY: header-args:R  :session *shell* :dpi 320

* Samples used table

| Age (hALH) | Tissue     | Marker    | Sample_n  |
|------------+------------+-----------+-----------|
| 1h         | CNS (4)    | nSyb-GAL4 | Sample_30 |
| 1h         | CNS (5)    | nSyb-GAL4 | Sample_31 |
| 24h        | Brain (10) | nSyb-GAL4 | Sample_19 |
| 24h        | Brain (10) | nSyb-GAL4 | Sample_21 |
| 24h        | Brain (6)  | nSyb-GAL4 | Sample_24 |
| 24h        | VNC (6)    | nSyb-GAL4 | Sample_20 |
| 24h        | VNC (6)    | nSyb-GAL4 | Sample_22 |
| 48h        | CNS (1)    | Repo-GAL4 | Sample_1  |
| 48h        | CNS (1)    | nSyb-GAL4 | Sample_2  |
| 48h        | CNS (2)    | nSyb-GAL4 | Sample_3  |
| 48h        | CNS (1)    | nSyb-GAL4 | Sample_4  |
| 48h        | CNS (1)    | nSyb-GAL4 | Sample_6  |
| 48h        | Brain (6)  | nSyb-GAL4 | Sample_17 |
| 48h        | VNC (4)    | nSyb-GAL4 | Sample_18 |
| 48h        | Brain (8)  | nSyb-GAL4 | Sample_23 |
|------------+------------+-----------+-----------|

* Create guix environement
:PROPERTIES:
:ID:       9514d3c6-f0aa-4569-8995-5251cb39e26d
:END:
#+BEGIN_SRC scheme :tangle environement.scm
(use-modules (gnu packages))
(specifications->manifest
 '("r"
   "r-seurat"
   "r-shinycell"
   "r-ggplot2"
   "r-annotationhub"
   "r-ensembldb"
   "r-future"
   "r-org-dm-eg-db"
   "r-dplyr"
   "r-limma"
   "r-topgo"
   "r-harmony"
   "r-openxlsx"))
#+END_SRC

#+RESULTS:

Open an emacs shell and execute:
- guix environment -N --ad-hoc -m environement.scm
- start R

In emacs: M-x ess-remote and select R
* Load R packages and accessory data
** R Packages
Load packages. Using Seurat
#+BEGIN_SRC R :results output
suppressPackageStartupMessages({
  #library(AnnotationDbi)
  #library(AnnotationHub)
  library(org.Dm.eg.db)
  library(dplyr)
  library(ggplot2)
  library(gridExtra)
  library(grid)
  library(Seurat)
  library(patchwork)
  library(openxlsx)
  library(purrr)
  library(dplyr)
  #library(harmony)
  #library(topGO)
})
sessionInfo()
#+END_SRC

#+RESULTS:
#+begin_example
R version 4.1.2 (2021-11-01)
Platform: x86_64-unknown-linux-gnu (64-bit)
Running under: Pop!_OS 21.04

Matrix products: default
BLAS/LAPACK: /gnu/store/a0kh108d32jxb11m0dqbmd21ny3dvrqa-openblas-0.3.18/lib/libopenblasp-r0.3.18.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] grid      stats4    stats     graphics  grDevices utils     datasets
[8] methods   base

other attached packages:
 [1] purrr_0.3.4          openxlsx_4.2.5       patchwork_1.1.1
 [4] SeuratObject_4.0.4   Seurat_4.0.6         gridExtra_2.3
 [7] ggplot2_3.3.5        dplyr_1.0.7          org.Dm.eg.db_3.7.0
[10] AnnotationDbi_1.56.2 IRanges_2.28.0       S4Vectors_0.32.3
[13] Biobase_2.54.0       BiocGenerics_0.40.0

loaded via a namespace (and not attached):
  [1] Rtsne_0.15             colorspace_2.0-2       deldir_1.0-6
  [4] ellipsis_0.3.2         ggridges_0.5.3         XVector_0.34.0
  [7] spatstat.data_2.1-2    leiden_0.3.9           listenv_0.8.0
 [10] ggrepel_0.9.1          bit64_4.0.5            fansi_0.5.0
 [13] codetools_0.2-18       splines_4.1.2          cachem_1.0.6
 [16] polyclip_1.10-0        jsonlite_1.7.2         ica_1.0-2
 [19] cluster_2.1.2          png_0.1-7              uwot_0.1.11
 [22] spatstat.sparse_2.1-0  shiny_1.7.1            sctransform_0.3.2
 [25] compiler_4.1.2         httr_1.4.2             assertthat_0.2.1
 [28] Matrix_1.4-0           fastmap_1.1.0          lazyeval_0.2.2
 [31] later_1.3.0            htmltools_0.5.2        tools_4.1.2
 [34] igraph_1.2.10          gtable_0.3.0           glue_1.6.0
 [37] GenomeInfoDbData_1.2.0 RANN_2.6.1             reshape2_1.4.4
 [40] Rcpp_1.0.7             scattermore_0.7        vctrs_0.3.8
 [43] Biostrings_2.62.0      nlme_3.1-153           lmtest_0.9-39
 [46] stringr_1.4.0          globals_0.14.0         mime_0.12
 [49] miniUI_0.1.1.1         lifecycle_1.0.1        irlba_2.3.5
 [52] goftest_1.2-3          future_1.23.0          MASS_7.3-54
 [55] zoo_1.8-9              scales_1.1.1           spatstat.core_2.3-2
 [58] promises_1.2.0.1       spatstat.utils_2.3-0   parallel_4.1.2
 [61] RColorBrewer_1.1-2     memoise_2.0.1          reticulate_1.22
 [64] pbapply_1.5-0          rpart_4.1-15           stringi_1.7.6
 [67] RSQLite_2.2.9          zip_2.2.0              GenomeInfoDb_1.30.0
 [70] rlang_0.4.12           pkgconfig_2.0.3        matrixStats_0.61.0
 [73] lattice_0.20-45        tensor_1.5             ROCR_1.0-11
 [76] htmlwidgets_1.5.4      cowplot_1.1.1          bit_4.0.4
 [79] tidyselect_1.1.1       parallelly_1.30.0      RcppAnnoy_0.0.19
 [82] plyr_1.8.6             magrittr_2.0.1         R6_2.5.1
 [85] generics_0.1.1         DBI_1.1.2              mgcv_1.8-38
 [88] pillar_1.6.4           withr_2.4.3            fitdistrplus_1.1-6
 [91] abind_1.4-5            survival_3.2-13        KEGGREST_1.34.0
 [94] RCurl_1.95-0.1.2       tibble_3.1.6           future.apply_1.8.1
 [97] crayon_1.4.2           KernSmooth_2.23-20     utf8_1.2.2
[100] spatstat.geom_2.3-1    plotly_4.10.0          data.table_1.14.2
[103] blob_1.2.2             digest_0.6.29          xtable_1.8-4
[106] tidyr_1.1.4            httpuv_1.6.4           munsell_0.5.0
[109] viridisLite_0.4.0
#+end_example

** Matrices paths
#+BEGIN_SRC sh
ls ./10X_data
#+END_SRC

#+RESULTS:
| Sample_17_SI-GA-A3_merged_Sample_17 |
| Sample_18_SI-GA-B3_merged_Sample_18 |
| Sample_19_SI-GA-C3_count_Sample_19  |
| Sample_1_SI-GA-A1_count_Sample_1    |
| Sample_20_SI-GA-D3_count_Sample_20  |
| Sample_21_SI-GA-E3_count_Sample_21  |
| Sample_22_SI-GA-F3_count_Sample_22  |
| Sample_23_SI-GA-G3_merged_Sample_23 |
| Sample_24_SI-GA-H3_count_Sample_24  |
| Sample_2_SI-GA-B1_merged_Sample_2   |
| Sample_30_SI-GA-A12_count_Sample_30 |
| Sample_31_SI-GA-B12_count_Sample_31 |
| Sample_32_SI-GA-C12_count_Sample_32 |
| Sample_33_SI-GA-D12_count_Sample_33 |
| Sample_34_SI-GA-E12_count_Sample_34 |
| Sample_35_SI-GA-F12_count_Sample_35 |
| Sample_36_SI-GA-G12_count_Sample_36 |
| Sample_37_SI-GA-H12_count_Sample_37 |
| Sample_38_SI-GA-A11_count_Sample_38 |
| Sample_39_SI-GA-B11_count_Sample_39 |
| Sample_3_SI-GA-C1_merged_Sample_3   |
| Sample_4_SI-GA-D1_merged_Sample_4   |
| Sample_5_SI-GA-B4_count_Sample_5    |
| Sample_5_SI-GA-E1_count_Sample_5    |
| Sample_6_SI-GA-C4_count_Sample_6    |
| Sample_6_SI-GA-F1_count_Sample_6    |
| Sample_7_SI-GA-G1_merged_Sample_7   |
| Sample_8_SI-GA-E4_count_Sample_8    |
| Sample_8_SI-GA-H1_merged_Sample_8   |

** Flybase gene snapshots

#+BEGIN_SRC R :results output
snaps <- read.delim("./Accessory_data/gene_snapshots_fb_2021_01.tsv", sep="\t", header=FALSE, comment.char="#", quote="", fill=FALSE)
colnames(snaps) <- c("FBgn_ID", "GeneSymbol", "GeneName", "datestamp", "gene_snapshot_text")
head(snaps)
#+END_SRC

#+RESULTS:
#+begin_example
      FBgn_ID GeneSymbol                            GeneName datestamp
1 FBgn0262029          d                               dachs  20190307
2 FBgn0052532    CG32532                                   -         -
3 FBgn0023536     CG3156                                   -         -
4 FBgn0029718     mRpL30 mitochondrial ribosomal protein L30         -
5 FBgn0031101     CG1631                                   -         -
6 FBgn0030952    CG12609                                   -         -
                                                                                                                                                                                                                                                        gene_snapshot_text
1 dachs (d) encodes a myosin family protein that participates in Dachsous-Fat signaling, which polarizes its localization. It influences planar cell polarity, partly through interaction with the product of pk, and growth, through interaction with the product of wts.
2                                                                                                                                                                                                                                                   Contributions welcome.
3                                                                                                                                                                                                                                                   Contributions welcome.
4                                                                                                                                                                                                                                                   Contributions welcome.
5                                                                                                                                                                                                                                                   Contributions welcome.
6                                                                                                                                                                                                                                                   Contributions welcome.
#+end_example

** Gerry Rubin neuromarkers
#+BEGIN_SRC R :results output
grm <- read.delim("Accessory_data/gerry_rubin_neuromarkers.txt", sep="\t", header=FALSE)
grm <- grm[,c(1,2,4)] # remove duplicated column
colnames(grm) <- c("FlybaseID", "Class", "Gene_name")
head(grm)
#+END_SRC

#+RESULTS:
:     FlybaseID             Class Gene_name
: 1 FBgn0043005 neurotransmitters       prt
: 2 FBgn0032840 neurotransmitters      sNPF
: 3 FBgn0000303 neurotransmitters      ChAT
: 4 FBgn0270928 neurotransmitters     VAChT
: 5 FBgn0031424 neurotransmitters     VGlut
: 6 FBgn0004516 neurotransmitters      Gad1

** Cell cycle genes
Read cell cycle genes
#+begin_src R :results output
cell_cycle_markers <- readRDS("../Accessory_data/cell_cycle_markers.rds")
head(cell_cycle_markers)
#+end_src

#+RESULTS:
: Error in gzfile(file, "rb") : cannot open the connection
: In addition: Warning message:
: In gzfile(file, "rb") :
:   cannot open compressed file '../Accessory_data/cell_cycle_markers.rds', probable reason 'No such file or directory'
: Error in h(simpleError(msg, call)) :
:   error in evaluating the argument 'x' in selecting a method for function 'head': object 'cell_cycle_markers' not found


Create S phase genes and G2/M phase genes
#+BEGIN_SRC R :results output
# Acquire the S phase genes
s_genes <- cell_cycle_markers %>%
        dplyr::filter(phase == "S") %>%
        pull("gene_name")

# Acquire the G2M phase genes
g2m_genes <- cell_cycle_markers %>%
        dplyr::filter(phase == "G2/M") %>%
        pull("gene_name")
#+END_SRC

#+RESULTS:
: Error in dplyr::filter(., phase == "S") :
:   object 'cell_cycle_markers' not found
: Error in dplyr::filter(., phase == "G2/M") :
:   object 'cell_cycle_markers' not found
** Homeobox
#+BEGIN_SRC R :results output
hbx <- read.delim("../Accessory_data/homeobox.tsv", header=FALSE)
colnames(hbx) <- c("FBid", "Gene", "Description")
head(hbx)
#+END_SRC

#+RESULTS:
: Error in file(file, "rt") : cannot open the connection
: In addition: Warning message:
: In file(file, "rt") :
:   cannot open file '../Accessory_data/homeobox.tsv': No such file or directory
: Error in colnames(hbx) <- c("FBid", "Gene", "Description") :
:   object 'hbx' not found
: Error in h(simpleError(msg, call)) :
:   error in evaluating the argument 'x' in selecting a method for function 'head': object 'hbx' not found

** Gene Markers

Neurons
#+begin_src R :results silent
functional_neurons.m <- c("brp",
                        "nSyb",
                        "myr-GFP-p10",
                        "nls-tdTomato",
                        "elav", # Also the developping
                        "Syt1",
                        "CadN",
                        "IA-2",
                        "Rdl",
                        "nrv3",
                        "VGlut",
                        "VAChT",
                        "Gad1",
                        "Vmat")
#+end_src


Undifferentiated neurons
#+begin_src R :results silent
adult_neurons.m <- c("hdc", # Sprecher paper
                     "unk", # Sprecher paper
                     "sn", # Ben's paper
                     "pho" # Ben's paper
                     )
#+end_src

Glia
#+begin_src R :results silent
glia.m  <- c("repo",
           "hoe1", # Ben's paper
           "Swim", # Ben's paper
           "vir-1", # Ben's paper
           "wrapper", # Ben's paper
           "alrm",
           "Eaat1",
           "Gat",
           "Gs2",
           "MFS9",
           "bnb",
           "sli", # Ben's paper
           "Obp99a",
           "apolpp",
           "santa-maria",
           "fabp",
           "CG43085"
           )
#+end_src

NPCs
#+begin_src R :results silent
npcs.m <- c("N",
                      "dpn",
                      "Pen", # Ben's paper but also salivary gld,
                      "mira",
                      "grh", # Sprecher paper
                      "Kr" # Sprecher paper
                        )
#+end_src

Neuroblasts
#+begin_src R :results output
neuroblasts.m <- c("Aldh", # Ben's paper
                   "dpn",
                   "erm"
                     )
#+end_src

#+RESULTS:

GMC
#+begin_src R :results silent
gmcs.m <- c("insb", # Ben's paper
          "CR31386", # Ben's paper
          "Imp", # Ben's paper
          "Syp" # Ben's paper
          )
#+end_src

Optic lobe Neuroepithelium
#+begin_src R :results output
optic_lobe.m <- c("Aldh", # Ben's paper
                   "Ocho", # Sprecher paper
                   "Tom",  # Sprecher paper
                   "Brd",  # Sprecher paper
                   "E(spl)m8-HLH", # Sprecher paper
                   "E(spl)mgamma-HLH" # Sprecher paper
                   )
#+end_src

#+RESULTS:

Monoaminergic
#+begin_src R :results silent
monoaminergic.m <- c("Trh", # Ben's paper
                     "ple", # Ben's paper
                     "DAT", # Ben's paper
                     "SerT", # Ben's paper
                     "Jhl-21" # Ben's paper
                     )
#+end_src

Hemocytes
#+begin_src R :results silent
hemocytes.m <- c("srp",
                 "Nplp2"
                 )
#+end_src

Imaginal discs
#+begin_src R :results silent
imag_discs.m <- c("CG43679",
                  "CG14850",
                  "CG44956",
                  "CG31698")
#+end_src

Salivary glands
#+begin_src R :results silent
saliv_gland.m <- c("heph",
                   "Syp",
                   "shg",
                   "Fas3"
                   )
#+end_src

Ring gland
#+begin_src R :results silent
ring_gland.m <- c("phm",
                  "spo",
                  "spok",
                  "dib",
                  "sad",
                  "shd",
                  "cu")
#+end_src
** Functions
Taken from Hemberg lab
#+begin_src R :results output
plot_integrated_clusters = function (srat) {
  ## take an integrated Seurat object, plot distributions over orig.ident
  library(Seurat)
  library(patchwork)
  library(ggplot2)
  library(reshape2)
  library(RColorBrewer)


  count_table <- table(srat@meta.data$seurat_clusters, srat@meta.data$stage)
  count_mtx   <- as.data.frame.matrix(count_table)
  count_mtx$cluster <- rownames(count_mtx)
  melt_mtx    <- melt(count_mtx)
  melt_mtx$cluster <- as.factor(melt_mtx$cluster)

  cluster_size   <- aggregate(value ~ cluster, data = melt_mtx, FUN = sum)

  sorted_labels <- paste(sort(as.integer(levels(cluster_size$cluster)),decreasing = T))
  cluster_size$cluster <- factor(cluster_size$cluster,levels = sorted_labels)
  melt_mtx$cluster <- factor(melt_mtx$cluster,levels = sorted_labels)

  colnames(melt_mtx)[2] <- "dataset"


  p1 <- ggplot(cluster_size, aes(y= cluster,x = value)) + geom_bar(position="dodge", stat="identity",fill = "grey60") +
    theme_bw() + scale_x_log10() + xlab("Cells per cluster, log10 scale") + ylab("")
  p2 <- ggplot(melt_mtx,aes(x=cluster,y=value,fill=dataset)) +
    geom_bar(position="fill", stat="identity") + theme_bw() + coord_flip() +
    scale_fill_manual(values = colorRampPalette(brewer.pal(12, "Set3"))(20)) +
    ylab("Fraction of cells in each dataset") + xlab("Cluster number") + theme(legend.position="top")

  p2 + p1 + plot_layout(widths = c(3,1))


  }
#+end_src

#+RESULTS:
** Install SeuratWrappers

Need to set certificate variables and added r-utils and nss-certs to the environment.scm
#+begin_src sh
guix install nss-certs
export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
export GIT_SSL_CAINFO="$SSL_CERT_FILE"
export CURL_CA_BUNDLE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
#+end_src

#+RESULTS:

Then one can use remotes to install
#+begin_src

#+end_src
* Fig 1 All atlas Lognorm>rPCA
Saved atlases object
#+begin_src R :results output
atlases <- readRDS("atlases_rPCA.rds")
#+end_src

#+RESULTS:

** Load counts and create Seurat objects
I discard:
Sample_1 -> Repo-Gal4,
Sample_7 -> 201Y x TNTe (Expressing TNT in KCs)
Sample_8 -> 201Y x J29;J105 (Expressing GFP in KCs)
*** Load 1h data

| 1h         | CNS (4)     | nSyb-GAL4       | Sample_30 |
#+begin_src R :results output
data1h1 <- Read10X("10X_data/Sample_30_SI-GA-A12_count_Sample_30/filtered_feature_bc_matrix/")
atlas1h1  <- CreateSeuratObject(counts = data1h1, project = "atlas1h1",
                                min.cells = 5,
                                min.features = 200)
atlas1h1 <- RenameCells(object = atlas1h1,
                       add.cell.id = "atlas1h1")
atlas1h1
#+end_src

#+RESULTS:
: An object of class Seurat
: 7433 features across 6226 samples within 1 assay
: Active assay: RNA (7433 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas1h1[["percent.mt"]] <- PercentageFeatureSet(atlas1h1, pattern = "^mt:")
#+END_SRC

| 1h         | CNS (5)     | nSyb-GAL4       | Sample_31 |
#+begin_src R :results output
data1h2 <- Read10X("10X_data/Sample_31_SI-GA-B12_count_Sample_31/filtered_feature_bc_matrix/")
atlas1h2  <- CreateSeuratObject(counts = data1h2, project = "atlas1h2",
                                min.cells = 5,
                                min.features = 200)
atlas1h2 <- RenameCells(object = atlas1h2,
                       add.cell.id = "atlas1h2")
atlas1h2
#+end_src

#+RESULTS:
: An object of class Seurat
: 8935 features across 9254 samples within 1 assay
: Active assay: RNA (8935 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas1h2[["percent.mt"]] <- PercentageFeatureSet(atlas1h2, pattern = "^mt:")
#+END_SRC

*** Load 24h data (Brain + VNC)
| 24h        | Brain (10)  | nSyb-GAL4       | Sample_19 |
#+begin_src R :results output
data24h1 <- Read10X("10X_data/Sample_19_SI-GA-C3_count_Sample_19/filtered_feature_bc_matrix/")
atlas24h1  <- CreateSeuratObject(counts = data24h1,
                                 project = "atlas24h1",
                                 min.cells = 5,
                                 min.features = 200)
atlas24h1 <- RenameCells(object = atlas24h1, add.cell.id = "atlas24h1")
atlas24h1
#+end_src

#+RESULTS:
: An object of class Seurat
: 8833 features across 7505 samples within 1 assay
: Active assay: RNA (8833 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas24h1[["percent.mt"]] <- PercentageFeatureSet(atlas24h1, pattern = "^mt:")
#+END_SRC


| 24h        | VNC (6)     | nSyb-GAL4       | Sample_20 |
#+begin_src R :results output
data24h2 <- Read10X("10X_data/Sample_20_SI-GA-D3_count_Sample_20/filtered_feature_bc_matrix/")
atlas24h2  <- CreateSeuratObject(counts = data24h2,
                                 project = "atlas24h2",
                                 min.cells = 5,
                                 min.features = 200)
atlas24h2 <- RenameCells(object = atlas24h2, add.cell.id = "atlas24h2")
atlas24h2
#+end_src

#+RESULTS:
: An object of class Seurat
: 8253 features across 3903 samples within 1 assay
: Active assay: RNA (8253 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas24h2[["percent.mt"]] <- PercentageFeatureSet(atlas24h2, pattern = "^mt:")
#+END_SRC


| 24h        | Brain (10)  | nSyb-GAL4       | Sample_21 |
#+begin_src R :results output
data24h3 <- Read10X("10X_data/Sample_21_SI-GA-E3_count_Sample_21/filtered_feature_bc_matrix/")
atlas24h3  <- CreateSeuratObject(counts = data24h3,
                                 project = "atlas24h3",
                                 min.cells = 5,
                                 min.features = 200)
atlas24h3 <- RenameCells(object = atlas24h3, add.cell.id = "atlas24h3")
atlas24h3
#+end_src

#+RESULTS:
: An object of class Seurat
: 9302 features across 12460 samples within 1 assay
: Active assay: RNA (9302 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas24h3[["percent.mt"]] <- PercentageFeatureSet(atlas24h3, pattern = "^mt:")
#+END_SRC


| 24h        | VNC (6)     | nSyb-GAL4       | Sample_22 |
#+begin_src R :results output
data24h4 <- Read10X("10X_data/Sample_22_SI-GA-F3_count_Sample_22/filtered_feature_bc_matrix/")
atlas24h4  <- CreateSeuratObject(counts = data24h4,
                                 project = "atlas24h4",
                                 min.cells = 5,
                                 min.features = 200)
atlas24h4 <- RenameCells(object = atlas24h4, add.cell.id = "atlas24h4")
atlas24h4
#+end_src

#+RESULTS:
: An object of class Seurat
: 8370 features across 6239 samples within 1 assay
: Active assay: RNA (8370 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas24h4[["percent.mt"]] <- PercentageFeatureSet(atlas24h4, pattern = "^mt:")
#+END_SRC


| 24h        | Brain (6)   | nSyb-GAL4       | Sample_24 |
#+begin_src R :results output
data24h5 <- Read10X("10X_data/Sample_24_SI-GA-H3_count_Sample_24/filtered_feature_bc_matrix/")
atlas24h5  <- CreateSeuratObject(counts = data24h5,
                                 project = "atlas24h5",
                                 min.cells = 5,
                                 min.features = 200)
atlas24h5 <- RenameCells(object = atlas24h5, add.cell.id = "atlas24h5")
atlas24h5
#+end_src

#+RESULTS:
: An object of class Seurat
: 9087 features across 11612 samples within 1 assay
: Active assay: RNA (9087 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas24h5[["percent.mt"]] <- PercentageFeatureSet(atlas24h5, pattern = "^mt:")
#+END_SRC

*** Load 48h data (CNS + Brain + VNC)

| 48h        | CNS (1)     | Repo-GAL4       | Sample_1  |
#+begin_src R :results output
## data48h1 <- Read10X("10X_data/Sample_1_SI-GA-A1_count_Sample_1/")
## atlas48h1 <- CreateSeuratObject(counts = data48h1,
##                                 project = "atlas48h1",
##                                 min.cells = 5,
##                                 min.features = 200)
## atlas48h1 <- RenameCells(object = atlas48h1, add.cell.id = "atlas48h1")
## atlas48h1
#+end_src

#+RESULTS:
: An object of class Seurat
: 6807 features across 630 samples within 1 assay
: Active assay: RNA (6807 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h1[["percent.mt"]] <- PercentageFeatureSet(atlas48h1, pattern = "^mt:")
#+END_SRC


| 48h        | CNS (1)     | nSyb-GAL4       | Sample_2  |
#+begin_src R :results output
data48h2 <- Read10X("10X_data/Sample_2_SI-GA-B1_merged_Sample_2/filtered_feature_bc_matrix/")
atlas48h2 <- CreateSeuratObject(counts = data48h2,
                                project = "atlas48h2",
                                min.cells = 5,
                                min.features = 200)
atlas48h2 <- RenameCells(object = atlas48h2, add.cell.id = "atlas48h2")
atlas48h2
#+end_src

#+RESULTS:
: An object of class Seurat
: 9238 features across 6007 samples within 1 assay
: Active assay: RNA (9238 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h2[["percent.mt"]] <- PercentageFeatureSet(atlas48h2, pattern = "^mt:")
#+END_SRC


| 48h        | CNS (2)     | nSyb-GAL4       | Sample_3  |
#+begin_src R :results output
data48h3 <- Read10X("10X_data/Sample_3_SI-GA-C1_merged_Sample_3/filtered_feature_bc_matrix/")
atlas48h3 <- CreateSeuratObject(counts = data48h3,
                                project = "atlas48h3",
                                min.cells = 5,
                                min.features = 200)
atlas48h3 <- RenameCells(object = atlas48h3, add.cell.id = "atlas48h3")
atlas48h3
#+end_src

#+RESULTS:
: An object of class Seurat
: 10877 features across 17438 samples within 1 assay
: Active assay: RNA (10877 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h3[["percent.mt"]] <- PercentageFeatureSet(atlas48h3, pattern = "^mt:")
#+END_SRC


| 48h        | CNS (1)     | nSyb-GAL4       | Sample_4  |
#+begin_src R :results output
data48h4 <- Read10X("10X_data/Sample_4_SI-GA-D1_merged_Sample_4/filtered_feature_bc_matrix/")
atlas48h4 <- CreateSeuratObject(counts = data48h4,
                                project = "atlas48h4",
                                min.cells = 5,
                                min.features = 200)
atlas48h4 <- RenameCells(object = atlas48h4, add.cell.id = "atlas48h4")
atlas48h4
#+end_src

#+RESULTS:
: An object of class Seurat
: 8892 features across 5101 samples within 1 assay
: Active assay: RNA (8892 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h4[["percent.mt"]] <- PercentageFeatureSet(atlas48h4, pattern = "^mt:")
#+END_SRC


| 48h        | CNS (1)     | nSyb-GAL4       | Sample_6  |
#+begin_src R :results output
data48h5 <- Read10X("10X_data/Sample_6_SI-GA-F1_count_Sample_6/filtered_feature_bc_matrix/")
atlas48h5 <- CreateSeuratObject(counts = data48h5,
                                project = "atlas48h5",
                                min.cells = 5,
                                min.features = 200)
atlas48h5 <- RenameCells(object = atlas48h5, add.cell.id = "atlas48h5")
atlas48h5
#+end_src

#+RESULTS:
: An object of class Seurat
: 8171 features across 1762 samples within 1 assay
: Active assay: RNA (8171 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h5[["percent.mt"]] <- PercentageFeatureSet(atlas48h5, pattern = "^mt:")
#+END_SRC


| 48h        | CNS (1)     | KC-GAL4 x TNTe  | Sample_7  |
#+begin_src R :results output
## data48h5 <- Read10X("10X_data/Sample_7_SI-GA-G1_merged_Sample_7")
## atlas48h5 <- CreateSeuratObject(counts = data48h5,
##                                 project = "atlas48h5",
##                                 min.cells = 5,
##                                 min.features = 200)
## atlas48h5 <- RenameCells(object = atlas48h5, add.cell.id = "atlas48h5")
## atlas48h5
#+end_src

#+RESULTS:
: An object of class Seurat
: 8905 features across 1574 samples within 1 assay
: Active assay: RNA (8905 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h5[["percent.mt"]] <- PercentageFeatureSet(atlas48h5, pattern = "^mt:")
#+END_SRC


| 48h        | CNS (1)     | KC-GAL4         | Sample_8  |
#+begin_src R :results output
## data48h6 <- Read10X("10X_data/Sample_8_SI-GA-H1_merged_Sample_8")
## atlas48h6 <- CreateSeuratObject(counts = data48h6,
##                                 project = "atlas48h6",
##                                 min.cells = 5,
##                                 min.features = 200)
## atlas48h6 <- RenameCells(object = atlas48h6, add.cell.id = "atlas48h6")
## atlas48h6
#+end_src

#+RESULTS:
: An object of class Seurat
: 8975 features across 2109 samples within 1 assay
: Active assay: RNA (8975 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h6[["percent.mt"]] <- PercentageFeatureSet(atlas48h6, pattern = "^mt:")
#+END_SRC


| 48h        | Brain (6)   | nSyb-GAL4       | Sample_17 |
#+begin_src R :results output
data48h7 <- Read10X("10X_data/Sample_17_SI-GA-A3_merged_Sample_17/filtered_feature_bc_matrix/")
atlas48h7 <- CreateSeuratObject(counts = data48h7,
                                project = "atlas48h7",
                                min.cells = 5,
                                min.features = 200)
atlas48h7 <- RenameCells(object = atlas48h7, add.cell.id = "atlas48h7")
atlas48h7
#+end_src

#+RESULTS:
: An object of class Seurat
: 9978 features across 15774 samples within 1 assay
: Active assay: RNA (9978 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h7[["percent.mt"]] <- PercentageFeatureSet(atlas48h7, pattern = "^mt:")
#+END_SRC


| 48h        | VNC (4)     | nSyb-GAL4       | Sample_18 |
#+begin_src R :results output
data48h8 <- Read10X("10X_data/Sample_18_SI-GA-B3_merged_Sample_18/filtered_feature_bc_matrix/")
atlas48h8 <- CreateSeuratObject(counts = data48h8,
                                project = "atlas48h8",
                                min.cells = 5,
                                min.features = 200)
atlas48h8 <- RenameCells(object = atlas48h8, add.cell.id = "atlas48h8")
atlas48h8
#+end_src

#+RESULTS:
: An object of class Seurat
: 8976 features across 9320 samples within 1 assay
: Active assay: RNA (8976 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h8[["percent.mt"]] <- PercentageFeatureSet(atlas48h8, pattern = "^mt:")
#+END_SRC


| 48h        | Brain (8)   | nSyb-GAL4       | Sample_23 |
#+begin_src R :results output
data48h9 <- Read10X("10X_data/Sample_23_SI-GA-G3_merged_Sample_23/filtered_feature_bc_matrix/")
atlas48h9 <- CreateSeuratObject(counts = data48h9,
                                project = "atlas48h9",
                                min.cells = 5,
                                min.features = 200)
atlas48h9 <- RenameCells(object = atlas48h9, add.cell.id = "atlas48h9")
atlas48h9
#+end_src

#+RESULTS:
: An object of class Seurat
: 9929 features across 15578 samples within 1 assay
: Active assay: RNA (9929 features, 0 variable features)

Mitocondrial genes expression
#+BEGIN_SRC R :results silent
atlas48h9[["percent.mt"]] <- PercentageFeatureSet(atlas48h9, pattern = "^mt:")
#+END_SRC
** Create data list
#+begin_src R :results output
atlas_list <- list(atlas1h1, atlas1h2, atlas24h1, atlas24h2, atlas24h3, atlas24h3, atlas24h4, atlas24h5, atlas48h2, atlas48h3, atlas48h4, atlas48h7, atlas48h8, atlas48h9)
#+end_src

#+RESULTS:
** Remove high mitocondrial and low diversity cells
#+begin_src R :results outout
atlas_list <- lapply(X = atlas_list, FUN = subset, subset = nFeature_RNA > 200 & percent.mt < 20)
#+end_src
** Normalize and find variable features
#+begin_src R :results output
# normalize and identify variable features for each dataset independently
atlas_list <- lapply(X = atlas_list, FUN = function(x) {
    x <- NormalizeData(x, verbose=FALSE)
    x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 5000, verbose=FALSE)
})
#+end_src

#+RESULTS:
** Integration
#+begin_src R :results output
features <- SelectIntegrationFeatures(object.list = atlas_list, nfeatures = 5000)
#+end_src

#+RESULTS:

#+begin_src R :results output
atlas_list <- lapply(X = atlas_list, FUN = function(x) {
    x <- ScaleData(x, features = features, verbose = TRUE)
    x <- RunPCA(x, features = features, npcs=100, verbose = TRUE)
})
#+end_src

#+RESULTS:

#+begin_src R :results output
atlas.anchors <- FindIntegrationAnchors(object.list = atlas_list, anchor.features = features, reduction = "rpca", dims=1:50)
#+end_src


#+begin_src R :results output
atlases <- IntegrateData(anchorset = atlas.anchors, dims=1:50)
#+end_src

#+RESULTS:
** Standard workflow
#+begin_src R :results output
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(atlases) <- "integrated"

# Run the standard workflow for visualization and clustering
atlases <- ScaleData(atlases, verbose = FALSE)
atlases <- RunPCA(atlases, npcs = 50, verbose = FALSE)
atlases <- FindNeighbors(atlases, reduction = "pca", dims = 1:50)
atlases <- FindClusters(atlases, resolution = 2)
atlases <- RunUMAP(atlases, reduction = "pca", dims = 1:50, seed.use = 42)
#+end_src
** UMAP Plots unlabelled
#+begin_src R :results graphics file :file ./atlases_UMAP_plot_rPCA.png :width 2000 :height 1000
DimPlot(atlases, reduction = "umap", label=FALSE, repel=TRUE, raster=FALSE)
#+end_src

#+RESULTS:
[[file:./atlases_UMAP_plot_rPCA.png]]


#+begin_src R :results output
as.data.frame(table(atlases@meta.data$named_clusters))
#+end_src

#+RESULTS:
#+begin_example
                  Var1 Freq
1      1 Cholinergic N 4954
2      3 Cholinergic N 4750
3      4 Cholinergic N 4665
4     20 Cholinergic N 3021
5     31 Cholinergic N 1837
6     39 Cholinergic N 1399
7     45 Cholinergic N  964
8              12 KC N 3603
9              24 KC N 2606
10             59 KC N  465
11       6 GABAergic N 4270
12       7 GABAergic N 4117
13      21 GABAergic N 3011
14  10 Glutamatergic N 3786
15  25 Glutamatergic N 2588
16     22 Motorneurons 2877
17    44 Peptidergic N  988
18 49 Peptidergic IPCs  841
19    53 Peptidergic N  728
20    62 Peptidergic N  137
21    64 Peptidergic N  104
22   43 Dopaminergic N 1113
23 57 Serotoninergic N  550
24 65 Serotoninergic N  101
25 61 Octopaminergic N  276
26 63 Octopaminergic N  122
27          13 Undet N 3290
28          18 Undet N 3074
29          23 Undet N 2865
30          36 Undet N 1538
31          46 Undet N  887
32          54 Undet N  659
33           0 Immat N 5707
34           5 Immat N 4352
35           9 Immat N 3841
36          14 Immat N 3257
37          16 Immat N 3151
38          17 Immat N 3109
39          19 Immat N 3061
40          29 Immat N 1939
41          30 Immat N 1884
42          33 Immat N 1610
43          34 Immat N 1588
44          51 Immat N  791
45          37 Immat N 1482
46              2 NPCs 4901
47             11 NPCs 3616
48             40 NPCs 1268
49             41 NPCs 1217
50       15 NPCs/OL-NE 3240
51         42 NPCs/Tch 1127
52             58 Glia  539
53             50 Glia  841
54             35 Glia 1549
55             38 Glia 1431
56             26 Glia 2582
57             27 Glia 2540
58             52 Glia  767
59             55 Glia  646
60        28 Hemocytes 2205
61        56 Hemocytes  607
62       66 Ring Gland   43
#+end_example




Add time in metadata
#+begin_src R :results output
atlases[["stage"]] <- NA
atlases$stage[atlases$orig.ident %in% c("atlas1h1", "atlas1h2")] <- "1h"
atlases$stage[atlases$orig.ident %in%
              c("atlas24h1", "atlas24h2", "atlas24h3", "atlas24h4", "atlas24h5")] <- "24h"
atlases$stage[atlases$orig.ident %in%
              c("atlas48h1", "atlas48h2", "atlas48h3", "atlas48h4", "atlas48h5", "atlas48h6", "atlas48h7", "atlas48h8", "atlas48h9")] <- "48h"
#+end_src

#+RESULTS:

#+begin_src R :results output
as.data.frame(table(atlases@meta.data$named_clusters, atlases$stage))
#+end_src

#+RESULTS:
#+begin_example
                   Var1 Var2 Freq
1       1 Cholinergic N   1h 1123
2       3 Cholinergic N   1h 1519
3       4 Cholinergic N   1h  915
4      20 Cholinergic N   1h  417
5      31 Cholinergic N   1h  803
6      39 Cholinergic N   1h  772
7      45 Cholinergic N   1h  164
8               12 KC N   1h  194
9               24 KC N   1h   51
10              59 KC N   1h    9
11        6 GABAergic N   1h 1749
12        7 GABAergic N   1h  855
13       21 GABAergic N   1h  949
14   10 Glutamatergic N   1h  629
15   25 Glutamatergic N   1h  896
16      22 Motorneurons   1h  847
17     44 Peptidergic N   1h   68
18  49 Peptidergic IPCs   1h  175
19     53 Peptidergic N   1h  140
20     62 Peptidergic N   1h   41
21     64 Peptidergic N   1h    1
22    43 Dopaminergic N   1h  164
23  57 Serotoninergic N   1h  104
24  65 Serotoninergic N   1h   10
25  61 Octopaminergic N   1h   43
26  63 Octopaminergic N   1h   48
27           13 Undet N   1h    3
28           18 Undet N   1h    3
29           23 Undet N   1h    0
30           36 Undet N   1h   38
31           46 Undet N   1h  528
32           54 Undet N   1h    3
33            0 Immat N   1h  477
34            5 Immat N   1h   38
35            9 Immat N   1h   40
36           14 Immat N   1h    2
37           16 Immat N   1h    0
38           17 Immat N   1h    0
39           19 Immat N   1h   12
40           29 Immat N   1h    0
41           30 Immat N   1h    0
42           33 Immat N   1h    0
43           34 Immat N   1h   14
44           51 Immat N   1h   20
45           37 Immat N   1h    0
46               2 NPCs   1h   49
47              11 NPCs   1h   15
48              40 NPCs   1h  424
49              41 NPCs   1h   57
50        15 NPCs/OL-NE   1h   49
51          42 NPCs/Tch   1h    0
52              58 Glia   1h   19
53              50 Glia   1h  118
54              35 Glia   1h  126
55              38 Glia   1h    7
56              26 Glia   1h  148
57              27 Glia   1h  187
58              52 Glia   1h    2
59              55 Glia   1h  121
60         28 Hemocytes   1h  109
61         56 Hemocytes   1h    0
62        66 Ring Gland   1h   11
63      1 Cholinergic N  24h 1676
64      3 Cholinergic N  24h 1289
65      4 Cholinergic N  24h 1706
66     20 Cholinergic N  24h 1386
67     31 Cholinergic N  24h  534
68     39 Cholinergic N  24h  325
69     45 Cholinergic N  24h  518
70              12 KC N  24h 1095
71              24 KC N  24h 1354
72              59 KC N  24h  277
73        6 GABAergic N  24h 1267
74        7 GABAergic N  24h 1492
75       21 GABAergic N  24h 1185
76   10 Glutamatergic N  24h 1683
77   25 Glutamatergic N  24h  715
78      22 Motorneurons  24h 1072
79     44 Peptidergic N  24h  694
80  49 Peptidergic IPCs  24h  429
81     53 Peptidergic N  24h  380
82     62 Peptidergic N  24h   59
83     64 Peptidergic N  24h   72
84    43 Dopaminergic N  24h  605
85  57 Serotoninergic N  24h  273
86  65 Serotoninergic N  24h   65
87  61 Octopaminergic N  24h  148
88  63 Octopaminergic N  24h   43
89           13 Undet N  24h 3225
90           18 Undet N  24h 3016
91           23 Undet N  24h 2837
92           36 Undet N  24h  226
93           46 Undet N  24h  211
94           54 Undet N  24h   25
95            0 Immat N  24h 1641
96            5 Immat N  24h 1523
97            9 Immat N  24h  579
98           14 Immat N  24h  567
99           16 Immat N  24h 3111
100          17 Immat N  24h    2
101          19 Immat N  24h   20
102          29 Immat N  24h 1899
103          30 Immat N  24h    0
104          33 Immat N  24h    1
105          34 Immat N  24h  373
106          51 Immat N  24h  373
107          37 Immat N  24h   14
108              2 NPCs  24h 2000
109             11 NPCs  24h 2077
110             40 NPCs  24h  294
111             41 NPCs  24h  852
112       15 NPCs/OL-NE  24h 1811
113         42 NPCs/Tch  24h  994
114             58 Glia  24h   47
115             50 Glia  24h  402
116             35 Glia  24h  493
117             38 Glia  24h  638
118             26 Glia  24h 1056
119             27 Glia  24h  359
120             52 Glia  24h  339
121             55 Glia  24h  189
122        28 Hemocytes  24h 1177
123        56 Hemocytes  24h  536
124       66 Ring Gland  24h   25
125     1 Cholinergic N  48h 2155
126     3 Cholinergic N  48h 1942
127     4 Cholinergic N  48h 2044
128    20 Cholinergic N  48h 1218
129    31 Cholinergic N  48h  500
130    39 Cholinergic N  48h  302
131    45 Cholinergic N  48h  282
132             12 KC N  48h 2314
133             24 KC N  48h 1201
134             59 KC N  48h  179
135       6 GABAergic N  48h 1254
136       7 GABAergic N  48h 1770
137      21 GABAergic N  48h  877
138  10 Glutamatergic N  48h 1474
139  25 Glutamatergic N  48h  977
140     22 Motorneurons  48h  958
141    44 Peptidergic N  48h  226
142 49 Peptidergic IPCs  48h  237
143    53 Peptidergic N  48h  208
144    62 Peptidergic N  48h   37
145    64 Peptidergic N  48h   31
146   43 Dopaminergic N  48h  344
147 57 Serotoninergic N  48h  173
148 65 Serotoninergic N  48h   26
149 61 Octopaminergic N  48h   85
150 63 Octopaminergic N  48h   31
151          13 Undet N  48h   62
152          18 Undet N  48h   55
153          23 Undet N  48h   28
154          36 Undet N  48h 1274
155          46 Undet N  48h  148
156          54 Undet N  48h  631
157           0 Immat N  48h 3589
158           5 Immat N  48h 2791
159           9 Immat N  48h 3222
160          14 Immat N  48h 2688
161          16 Immat N  48h   40
162          17 Immat N  48h 3107
163          19 Immat N  48h 3029
164          29 Immat N  48h   40
165          30 Immat N  48h 1884
166          33 Immat N  48h 1609
167          34 Immat N  48h 1201
168          51 Immat N  48h  398
169          37 Immat N  48h 1468
170              2 NPCs  48h 2852
171             11 NPCs  48h 1524
172             40 NPCs  48h  550
173             41 NPCs  48h  308
174       15 NPCs/OL-NE  48h 1380
175         42 NPCs/Tch  48h  133
176             58 Glia  48h  473
177             50 Glia  48h  321
178             35 Glia  48h  930
179             38 Glia  48h  786
180             26 Glia  48h 1378
181             27 Glia  48h 1994
182             52 Glia  48h  426
183             55 Glia  48h  336
184        28 Hemocytes  48h  919
185        56 Hemocytes  48h   71
186       66 Ring Gland  48h    7
#+end_example

#+begin_src R :results graphics file :file ./atlases_UMAP_plot_rPCA_stage.pdf :width 12 :height 4
DimPlot(atlases, reduction = "umap", split.by="stage", raster=TRUE, label= TRUE, repel= TRUE, pt.size=0.1) + NoLegend()
#+end_src

#+RESULTS:
[[file:./atlases_UMAP_plot_rPCA_stage.pdf]]


Add tissue in metadata
#+begin_src R :results output
atlases[["tissue"]] <- NA
atlases$tissue[atlases$orig.ident %in% c("atlas1h1", "atlas1h2", "atlas48h1", "atlas48h2", "atlas48h3", "atlas48h4", "atlas48h5", "atlas48h6")] <- "CNS"
atlases$tissue[atlases$orig.ident %in% c("atlas24h1", "atlas24h3", "atlas24h5", "atlas48h7", "atlas48h9")] <- "Brain"
atlases$tissue[atlases$orig.ident %in% c("atlas24h2", "atlas24h4", "atlas48h8")] <- "VNC"
#+end_src

#+RESULTS:

#+begin_src R :results output
as.data.frame(table(atlases@meta.data$named_clusters, atlases$tissue))
#+end_src

#+RESULTS:
#+begin_example
                   Var1  Var2 Freq
1       1 Cholinergic N Brain 1999
2       3 Cholinergic N Brain 1673
3       4 Cholinergic N Brain 2405
4      20 Cholinergic N Brain 2273
5      31 Cholinergic N Brain  325
6      39 Cholinergic N Brain  222
7      45 Cholinergic N Brain  688
8               12 KC N Brain 2591
9               24 KC N Brain 2319
10              59 KC N Brain  426
11        6 GABAergic N Brain 1227
12        7 GABAergic N Brain 1825
13       21 GABAergic N Brain  924
14   10 Glutamatergic N Brain 2510
15   25 Glutamatergic N Brain  613
16      22 Motorneurons Brain  759
17     44 Peptidergic N Brain  707
18  49 Peptidergic IPCs Brain  414
19     53 Peptidergic N Brain  418
20     62 Peptidergic N Brain   40
21     64 Peptidergic N Brain   98
22    43 Dopaminergic N Brain  779
23  57 Serotoninergic N Brain  265
24  65 Serotoninergic N Brain   76
25  61 Octopaminergic N Brain  171
26  63 Octopaminergic N Brain   12
27           13 Undet N Brain 3253
28           18 Undet N Brain 3056
29           23 Undet N Brain 2865
30           36 Undet N Brain  238
31           46 Undet N Brain    2
32           54 Undet N Brain   14
33            0 Immat N Brain 1127
34            5 Immat N Brain 1941
35            9 Immat N Brain 1428
36           14 Immat N Brain  135
37           16 Immat N Brain 3122
38           17 Immat N Brain 3101
39           19 Immat N Brain 2976
40           29 Immat N Brain 1915
41           30 Immat N Brain 1856
42           33 Immat N Brain 1125
43           34 Immat N Brain  822
44           51 Immat N Brain  206
45           37 Immat N Brain   24
46               2 NPCs Brain 2551
47              11 NPCs Brain 3134
48              40 NPCs Brain  471
49              41 NPCs Brain  993
50        15 NPCs/OL-NE Brain 2963
51          42 NPCs/Tch Brain 1124
52              58 Glia Brain   39
53              50 Glia Brain  465
54              35 Glia Brain  671
55              38 Glia Brain  978
56              26 Glia Brain 1567
57              27 Glia Brain  672
58              52 Glia Brain  541
59              55 Glia Brain  254
60         28 Hemocytes Brain 1439
61         56 Hemocytes Brain  607
62        66 Ring Gland Brain   32
63      1 Cholinergic N   CNS 1852
64      3 Cholinergic N   CNS 1898
65      4 Cholinergic N   CNS 1701
66     20 Cholinergic N   CNS  604
67     31 Cholinergic N   CNS  930
68     39 Cholinergic N   CNS  814
69     45 Cholinergic N   CNS  240
70              12 KC N   CNS 1011
71              24 KC N   CNS  286
72              59 KC N   CNS   39
73        6 GABAergic N   CNS 2043
74        7 GABAergic N   CNS 1430
75       21 GABAergic N   CNS 1292
76   10 Glutamatergic N   CNS 1078
77   25 Glutamatergic N   CNS 1145
78      22 Motorneurons   CNS 1302
79     44 Peptidergic N   CNS  134
80  49 Peptidergic IPCs   CNS  264
81     53 Peptidergic N   CNS  202
82     62 Peptidergic N   CNS   50
83     64 Peptidergic N   CNS    6
84    43 Dopaminergic N   CNS  266
85  57 Serotoninergic N   CNS  166
86  65 Serotoninergic N   CNS   21
87  61 Octopaminergic N   CNS   82
88  63 Octopaminergic N   CNS   63
89           13 Undet N   CNS   28
90           18 Undet N   CNS   13
91           23 Undet N   CNS    0
92           36 Undet N   CNS  753
93           46 Undet N   CNS  541
94           54 Undet N   CNS  507
95            0 Immat N   CNS 2864
96            5 Immat N   CNS  965
97            9 Immat N   CNS 2068
98           14 Immat N   CNS 1511
99           16 Immat N   CNS   19
100          17 Immat N   CNS    7
101          19 Immat N   CNS   79
102          29 Immat N   CNS   16
103          30 Immat N   CNS   27
104          33 Immat N   CNS  484
105          34 Immat N   CNS  459
106          51 Immat N   CNS  135
107          37 Immat N   CNS 1441
108              2 NPCs   CNS  948
109             11 NPCs   CNS  397
110             40 NPCs   CNS  638
111             41 NPCs   CNS  126
112       15 NPCs/OL-NE   CNS  266
113         42 NPCs/Tch   CNS    1
114             58 Glia   CNS  449
115             50 Glia   CNS  265
116             35 Glia   CNS  694
117             38 Glia   CNS  400
118             26 Glia   CNS  863
119             27 Glia   CNS 1584
120             52 Glia   CNS  220
121             55 Glia   CNS  340
122        28 Hemocytes   CNS  631
123        56 Hemocytes   CNS    0
124       66 Ring Gland   CNS   11
125     1 Cholinergic N   VNC 1103
126     3 Cholinergic N   VNC 1179
127     4 Cholinergic N   VNC  559
128    20 Cholinergic N   VNC  144
129    31 Cholinergic N   VNC  582
130    39 Cholinergic N   VNC  363
131    45 Cholinergic N   VNC   36
132             12 KC N   VNC    1
133             24 KC N   VNC    1
134             59 KC N   VNC    0
135       6 GABAergic N   VNC 1000
136       7 GABAergic N   VNC  862
137      21 GABAergic N   VNC  795
138  10 Glutamatergic N   VNC  198
139  25 Glutamatergic N   VNC  830
140     22 Motorneurons   VNC  816
141    44 Peptidergic N   VNC  147
142 49 Peptidergic IPCs   VNC  163
143    53 Peptidergic N   VNC  108
144    62 Peptidergic N   VNC   47
145    64 Peptidergic N   VNC    0
146   43 Dopaminergic N   VNC   68
147 57 Serotoninergic N   VNC  119
148 65 Serotoninergic N   VNC    4
149 61 Octopaminergic N   VNC   23
150 63 Octopaminergic N   VNC   47
151          13 Undet N   VNC    9
152          18 Undet N   VNC    5
153          23 Undet N   VNC    0
154          36 Undet N   VNC  547
155          46 Undet N   VNC  344
156          54 Undet N   VNC  138
157           0 Immat N   VNC 1716
158           5 Immat N   VNC 1446
159           9 Immat N   VNC  345
160          14 Immat N   VNC 1611
161          16 Immat N   VNC   10
162          17 Immat N   VNC    1
163          19 Immat N   VNC    6
164          29 Immat N   VNC    8
165          30 Immat N   VNC    1
166          33 Immat N   VNC    1
167          34 Immat N   VNC  307
168          51 Immat N   VNC  450
169          37 Immat N   VNC   17
170              2 NPCs   VNC 1402
171             11 NPCs   VNC   85
172             40 NPCs   VNC  159
173             41 NPCs   VNC   98
174       15 NPCs/OL-NE   VNC   11
175         42 NPCs/Tch   VNC    2
176             58 Glia   VNC   51
177             50 Glia   VNC  111
178             35 Glia   VNC  184
179             38 Glia   VNC   53
180             26 Glia   VNC  152
181             27 Glia   VNC  284
182             52 Glia   VNC    6
183             55 Glia   VNC   52
184        28 Hemocytes   VNC  135
185        56 Hemocytes   VNC    0
186       66 Ring Gland   VNC    0
#+end_example

#+begin_src R :results graphics file :file ./atlases_UMAP_plot_rPCA_tissue.pdf :width 20 :height 15
DimPlot(atlases, reduction = "umap", split.by="tissue", raster=FALSE, label= TRUE, repel= TRUE)
#+end_src

** Plot big classes
#+BEGIN_SRC R :results graphics file :file ./atlases_big_neuron_classes_UMAP.png :height 4000 :width 4000
DefaultAssay(atlases) <- "RNA"
fts <- c("VAChT", "Gad1", "VGlut", "Vmat")
FeaturePlot(atlases, features = fts, label=TRUE, repel=TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./atlase_big_neuron_classes_UMAP.png]]

** Find conserved markers
https://rdrr.io/github/WarrenLab/single-cell/src/R/seurat_helpers.R
#+begin_src R :results output
FindAllConservedMarkers <- function(
    seurat,
    grouping.var,
    test.use = 'wilcox'
) {
    Reduce(function(df, cluster) {
        # FindConservedMarkers throws an error if it cannot find any
        # conserved markers for a cluster, so catch those errors and
        # deal with them by just not adding any lines to the dataframe
        # for that cluster and outputting a message.
        tryCatch({
            df2 <- FindConservedMarkers(
                seurat,
                ident.1 = cluster,
                grouping.var = grouping.var,
                only.pos = TRUE,
                test.use = test.use
            )
            df2$cluster <- cluster
            df2$feature <- rownames(df2)
            return(plyr::rbind.fill(df, df2))
        }, error = function(e) {
            print(paste0('Could not find biomarkers for cluster ', cluster))
            return(df)
        })
    }, levels(seurat$seurat_clusters), data.frame())
}
#+end_src

#+RESULTS:

#+begin_src R :results output
all_times.conserved.markers <- FindAllConservedMarkers(atlases, "stage")
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
all_times.conserved.markers <- left_join(all_times.conserved.markers, snaps, by = c("feature" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
#all_times.conserved.markers <- split(all_times.conserved.markers, all_times.conserved.markers$cluster)
write.xlsx(all_times.conserved.markers, file = "all_times_rPCA.conserved.markers.xlsx")
#+end_src
** Find cluster markers
#+BEGIN_SRC R :results silent
# find markers for every cluster compared to all remaining cells, report only the positive ones
DefaultAssay(atlases) <- "RNA"
all_times.markers <- FindAllMarkers(object = atlases, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE)
#+END_SRC


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
all_times.markers <- left_join(all_times.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
all_times.markers_list <- split(all_times.markers, all_times.markers$cluster)
write.xlsx(all_times.markers_list, file = "atlases_rPCA.markers_67.xlsx")
#+end_src
** Rename clusters

Reorder
#+begin_src R :results output
Idents(atlases) <- "seurat_clusters"
my_levels <- c(0,5,9,14,16,17,19,29,30,33,34,51,37,66,28,56,1,3,4,20,31,39,45,12,24,59,6,7,21,10,25,22,44,49,53,62,64,43,57,65,61,63,13,18,23,36,46,54,2,11,40,41,15,42,55,26,27,52,58,50,35,38)
atlases@active.ident <- factor(x = atlases@active.ident, levels = my_levels)
#+end_src

#+RESULTS:

Rename clusters
#+begin_src R :results output
new.cluster.ids <- c("0 Immat N", # Immat start
                     "5 Immat N",
                     "9 Immat N",
                     "14 Immat N",
                     "16 Immat N",
                     "17 Immat N",
                     "19 Immat N",
                     "29 Immat N",
                     "30 Immat N",
                     "33 Immat N",
                     "34 Immat N",
                     "51 Immat N",
                     "37 Immat N", # Immat end
                     "66 Ring Gland",
                     "28 Hemocytes",
                     "56 Hemocytes",
                     "1 Cholinergic N", # Mat start
                     "3 Cholinergic N",
                     "4 Cholinergic N",
                     "20 Cholinergic N",
                     "31 Cholinergic N",
                     "39 Cholinergic N",
                     "45 Cholinergic N",
                     "12 KC N",
                     "24 KC N",
                     "59 KC N",
                     "6 GABAergic N",
                     "7 GABAergic N",
                     "21 GABAergic N",
                     "10 Glutamatergic N",
                     "25 Glutamatergic N",
                     "22 Motorneurons",
                     "44 Peptidergic N",
                     "49 Peptidergic IPCs",
                     "53 Peptidergic N",
                     "62 Peptidergic N",
                     "64 Peptidergic N",
                     "43 Dopaminergic N",
                     "57 Serotoninergic N",
                     "65 Serotoninergic N",
                     "61 Octopaminergic N",
                     "63 Octopaminergic N",
                     "13 Undet N",
                     "18 Undet N",
                     "23 Undet N",
                     "36 Undet N",
                     "46 Undet N",
                     "54 Undet N", # Mat end
                     "2 NPCs",     # NPCs start
                     "11 NPCs",
                     "40 NPCs",
                     "41 NPCs",
                     "15 NPCs/OL-NE",
                     "42 NPCs/Tch",   # NPCs end
                     "55 Glia", # Glia start
                     "26 Glia",
                     "27 Glia",
                     "52 Glia", # Glia end
                     "58 Glia",
                     "50 Glia",
                     "35 Glia",
                     "38 Glia")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:

#+begin_src R :results output
new.cluster.ids <- c(
                     "12 KC N",
                     "24 KC N",
                     "59 KC N",
                     "Cholinergic N", # Mat start
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "GABAergic N",
                     "GABAergic N",
                     "GABAergic N",
                     "Glutamatergic N",
                     "Glutamatergic N",
                     "Motorneurons",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Dopaminergic N",
                     "Serotoninergic N",
                     "Serotoninergic N",
                     "Octopaminergic N",
                     "Octopaminergic N",
                     "Undet N",
                     "Undet N",
                     "Undet N",
                     "Undet N",
                     "Undet N",
                     "Undet N", # Mat end
                     "Immat N", # Immat start
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N", # Immat end
                     "NPCs",     # NPCs start
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "NPCs",   # NPCs end
                     "Glia", # Glia start
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia", # Glia end
                     "Hemocytes",
                     "Hemocytes",
                     "Ring Gland")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:






#+begin_src R :results output
new.cluster.ids <- c(
                     "12 KC N",
                     "24 KC N",
                     "59 KC N",
                     "GABAergic N",
                     "GABAergic N",
                     "GABAergic N",
                     "Glutamatergic N",
                     "Glutamatergic N",
                     "Motorneurons",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Dopaminergic N",
                     "Serotoninergic N",
                     "Serotoninergic N",
                     "Octopaminergic N",
                     "Octopaminergic N",
                     "Undet N",
                     "Undet N",
                     "Undet N",
                     "Undet N",
                     "Undet N",
                     "Undet N", # Mat end
                     "Cholinergic N", # Mat start
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Immat N", # Immat start
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N", # Immat end
                     "NPCs",     # NPCs start
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "NPCs",   # NPCs end
                     "Glia", # Glia start
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia", # Glia end
                     "Hemocytes",
                     "Hemocytes",
                     "Ring Gland")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:



Collapsed
#+begin_src R :results output
new.cluster.ids <- c("Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Matneu N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "Immat N",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Glia",
                     "Hemocytes",
                     "Hemocytes",
                     "Ring Gland")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:


Rename clusters
#+begin_src R :results output
new.cluster.ids <- c("0 Immat N",
                     "1 Cholinergic N",
                     "2 NPCs",
                     "3 Cholinergic N",
                     "4 Cholinergic N",
                     "5 Immat N",
                     "6 GABAergic N",
                     "7 GABAergic N",
                     "Low qual",
                     "9 Immat N",
                     "10 Glutamatergic N",
                     "11 NPCs",
                     "12 KC N",
                     "13 Undet N",
                     "14 Immat N",
                     "15 NPCs/OL-NE",
                     "16 Immat N",
                     "17 Immat N",
                     "18 Undet N",
                     "19 Immat N",
                     "20 Cholinergic N",
                     "21 GABAergic N",
                     "22 Motorneurons",
                     "23 Undet N",
                     "24 KC N",
                     "25 Glutamatergic N",
                     "26 Glia",
                     "27 Glia",
                     "28 Hemocytes",
                     "29 Immat N",
                     "30 Immat N",
                     "31 Cholinergic N",
                     "Low qual",
                     "33 Immat N",
                     "34 Immat N",
                     "35 Glia",
                     "36 Undet N",
                     "37 Immat N",
                     "38 Glia",
                     "39 Cholinergic N",
                     "40 NPCs",
                     "41 NPCs",
                     "42 NPCs/Tch",
                     "43 Dopaminergic N",
                     "44 Peptidergic N",
                     "45 Cholinergic N",
                     "46 Undet N",
                     "Low qual",
                     "Low qual",
                     "49 Peptidergic IPCs",
                     "50 Glia",
                     "51 Immat N",
                     "52 Glia",
                     "53 Peptidergic N",
                     "54 Undet N",
                     "55 Glia",
                     "56 Hemocytes",
                     "57 Serotoninergic N",
                     "58 Glia",
                     "59 KC N",
                     "Low qual",
                     "61 Octopaminergic N",
                     "62 Peptidergic N",
                     "63 Octopaminergic N",
                     "64 Peptidergic N",
                     "65 Serotoninergic N",
                     "66 Ring Gland")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:
: Warning: Cannot find identity NA
: Warning: Cannot find identity NA
: Warning: Cannot find identity NA
: Warning: Cannot find identity NA
: Warning: Cannot find identity NA

Rename clusters
#+begin_src R :results output
new.cluster.ids <- c("0 Immat N",
                     "1 Cholinergic N",
                     "2 NPCs",
                     "3 Cholinergic N",
                     "4 Cholinergic N",
                     "5 Immat N",
                     "6 GABAergic N",
                     "7 GABAergic N",
                     "9 Immat N",
                     "10 Glutamatergic N",
                     "11 NPCs",
                     "12 KC N",
                     "13 Undet N",
                     "14 Immat N",
                     "15 NPCs/OL-NE",
                     "16 Immat N",
                     "17 Immat N",
                     "18 Undet N",
                     "19 Immat N",
                     "20 Cholinergic N",
                     "21 GABAergic N",
                     "22 Motorneurons",
                     "23 Undet N",
                     "24 KC N",
                     "25 Glutamatergic N",
                     "26 Glia",
                     "27 Glia",
                     "28 Hemocytes",
                     "29 Immat N",
                     "30 Immat N",
                     "31 Cholinergic N",
                     "33 Immat N",
                     "34 Immat N",
                     "35 Glia",
                     "36 Undet N",
                     "37 Immat N",
                     "38 Glia",
                     "39 Cholinergic N",
                     "40 NPCs",
                     "41 NPCs",
                     "42 NPCs/Tch",
                     "43 Dopaminergic N",
                     "44 Peptidergic N",
                     "45 Cholinergic N",
                     "46 Undet N",
                     "49 Peptidergic IPCs",
                     "50 Glia",
                     "51 Immat N",
                     "52 Glia",
                     "53 Peptidergic N",
                     "54 Undet N",
                     "55 Glia",
                     "56 Hemocytes",
                     "57 Serotoninergic N",
                     "58 Glia",
                     "59 KC N",
                     "61 Octopaminergic N",
                     "62 Peptidergic N",
                     "63 Octopaminergic N",
                     "64 Peptidergic N",
                     "65 Serotoninergic N",
                     "66 Ring Gland")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:


#+begin_src R :results output
new.cluster.ids <- c("Immat N",
                     "Chol N",
                     "NPCs",
                     "Chol N",
                     "Chol N",
                     "Immat N",
                     "GABA N",
                     "GABA N",
                     "Immat N",
                     "Glut N",
                     "NPCs",
                     "KCs N",
                     "Undet N",
                     "Immat N",
                     "NPCs",
                     "Immat N",
                     "Immat N",
                     "Undet N",
                     "Immat N",
                     "Chol N",
                     "GABA N",
                     "Motor N",
                     "Undet N",
                     "KCs N",
                     "Glut N",
                     "Glia",
                     "Glia",
                     "Hemos",
                     "Immat N",
                     "Immat N",
                     "Chol N",
                     "Immat N",
                     "Immat N",
                     "Glia",
                     "Undet N",
                     "Immat N",
                     "Glia",
                     "Chol N",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "Monoa N",
                     "Pept N",
                     "Chol N",
                     "Undet N",
                     "Pept N",
                     "Glia",
                     "Immat N",
                     "Glia",
                     "Pept N",
                     "Undet N",
                     "Glia",
                     "Hemos",
                     "Monoa N",
                     "Glia",
                     "KCs N",
                     "Monoa N",
                     "Pept N",
                     "Monoa N",
                     "Pept N",
                     "Monoa N",
                     "RGL")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:

#+RESULTS:

Set Idents to seurat clusters
#+begin_src R :results output
Idents(object = atlases) <- "seurat_clusters"
#+end_src

#+RESULTS:

*** Cluster 0

#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster0_Immat-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "fz2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster0_?-Neurons_UMAP.png]]

*** Cluster 1

#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster1_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("ChAT", "VAChT", "ChT"),  label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster1_Undifferentitated-Neurons_UMAP.png]]

*** Cluster 2
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster2_NPCs_UMAP.png :width 1000 :height 500
FeaturePlot(atlases, features = c("N", "insb", "cas", "grh"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster2_Cholinergic-Neurons_UMAP.png]]

*** Cluster 3
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster3_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("ChAT", "VAChT", "ChT"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster3_Gholi-GABAergic-Neurons_UMAP.png]]

*** Cluster 4
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster4_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("ChAT", "VAChT", "ChT", "nSyb"),label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster4_GABAergic-Neurons_UMAP.png]]
*** Cluster 5
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster5_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "robo2", "Hey"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster5_Glia_UMAP.png]]
*** Cluster 6
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster6_GABAergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Gad1", "nsyb", "para", "CG14989"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster6_NPCs_UMAP.png]]
*** Cluster 7
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster7_GABAergic_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Gad1", "VGAT", "para", "nSyb"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster7_NPCs_UMAP.png]]
*** Cluster 8
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster8_LowQ_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("pros", "jim", "alrm", "Ilp5"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster8_Undifferentitated-Neurons_UMAP.png]]
*** Cluster 9
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster9_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "fz2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster9_Glia_UMAP.png]]
*** Cluster 10
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster10_Glutamatergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("VGlut", "nSyb", "para", "IA-2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster10_Glutamatergic-Neurons_UMAP.png]]
*** Cluster 11
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster11_NPCs_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("CycE", "klu", "SoxN", "ase"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster11_NPCs_UMAP.png]]
*** Cluster 12
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster12_KC-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("prt", "Dop1R2", "rad", "dnc"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster12_Kenyon-Cell-Neurons_UMAP.png]]
*** Cluster 13
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster13_Undet-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("nSyb", "para", "IA-2", "Ldh"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster13_GABAergic-Neurons_UMAP.png]]
*** Cluster 14
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster14_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "lncRNA:noe"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster14_Undifferentiated-Neurons_UMAP.png]]
*** Cluster 15
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster15_Neuroepithelia-OL_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("N", "Ocho", "Brd", "E(spl)mgamma-HLH"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster15_Undifferentiated-Neurons_UMAP.png]]
*** Cluster 16
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster16_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "fz2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster16_Undifferentiated-Neurons_UMAP.png]]
*** Cluster 17
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster17_Inmature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("pros", "hdc", "cib", "unk"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster17_Undifferentiated-Neurons_UMAP.png]]
*** Cluster 18
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster18_Undet-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("IA-2", "CaMKII", "nSyb", "para"), label= FALSE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster18_Motor-Neurons_UMAP.png]]
*** Cluster 19
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster19_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hid", "cib", "unk", "fz2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster19_Glia_UMAP.png]]
*** Cluster 20
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster20_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("ChAT", "VAChT", "ChT"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster20_Undifferentiated-Neurons_UMAP.png]]
*** Cluster 21
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster21_GABAergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Gad1", "VGAT", "nSyb", "para"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster21_Glutamatergic-Neurons_UMAP.png]]
*** Cluster 22
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster22_Motorneurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Proc", "twit", "nolo", "VGlut"), label= TRUE, repel= TRUE, raster=F)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster22_Cholinergic-Neurons_UMAP.png]]
*** Cluster 23
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster23_Undet-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("nSyb", "myr-GFP-p10", "para", "Ldh"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster23_Cholinergic-Neurons_UMAP.png]]
*** Cluster 24
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster24_KC-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("prt", "Dop1R2", "rad", "dnc"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster24_Undifferentiated-Neurons_UMAP.png]]
*** Cluster 25
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster25_Glutamatergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("VGlut", "CG46448", "nSyb", "para"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./All_times_Cluster25_Glia_UMAP.png]]
*** Cluster 26
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster26_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("wrapper", "santa-maria", "hoe1", "Npc2a"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 27
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster27_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("wrapper", "santa-maria", "hoe1", "Npc2a"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 28
#+BEGIN_SRC R :results graphics file :file ./All_times_Cluster28_Hemocytes_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("col4a1", "SPARC", "vkg", "Cht2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 29
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster29_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "fz2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 30
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster30_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "pdm3"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 31
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster31_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("VAChT", "kn", "acj6", "para"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 32
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster32_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("wrapper", "Npc2a", "hoe1", "Fer1HCH"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 33
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster33_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "scro"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 34
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster34_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "jim"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 35
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster35_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Gs2", "alrm", "Eaat1", "hoe1"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 36
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster36_Undet-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("para", "nSyb", "Rdl", "tou"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 37
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster37_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "jim"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 38
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster38_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("alrm", "repo", "ImpE1", "pros"), label= FALSE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 39
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster39_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("VAChT", "para", "disco", "disco-r"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 40
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster40_NPCs_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Thor", "grh", "Pen", "mira"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 41
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster41_NPCs_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("grh", "stg", "Pen", "CycE"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 42
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster42_Neuroepithelia-trachea_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("pio", "dpy", "uif", "serp"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 43
#+BEGIN_SRC R :results graphics file :file ./All_times_Cluster43_Dopaminergic_neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Vmat", "DAT", "ple", "Ddc"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 44
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster44_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("CrebA", "amon", "Phm", "Pal2"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 45
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster45_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("ChAT", "VAChT", "acj6", "nSyb"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 46
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster46_Undet-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Gpb5", "Ilp5", "Ilp2", "dimm"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 47
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster47_LQ-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("VAChT", "rad", "ChAT", "nSyb"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 48
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster48_Unknown_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("CG9338", "CG1572", "CG9336", "Chd64"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 49
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster49_Peptidergic-IPCs_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("amon", "twit", "Ilp3", "Ilp5"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 50
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster50_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Gat", "alrm", "Gs2", "Eaat1"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 51
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster51_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "unk", "CG42394"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 52
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster52_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Npc2a", "wrapper", "repo", "Npc2b"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 53
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster53_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Pal2", "CrebA", "Phm", "amon"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 54
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster54_Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("VGlut", "Gad1", "Eip74EF", "myr-GFP-p10"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 55
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster55_SP-Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Mdr65", "moody", "Swim", "SPARC"), label= FALSE, repel= TRUE, raster=FALSE)
#+END_SRC

#+RESULTS:
[[file:./atlases_Cluster55_SP-Glia_UMAP.png]]

*** Cluster 56
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster56_Hemocytes_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Nplp2", "Ance", "He", "Hml"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

*** Cluster 57
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster57_Serotoninergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Vmat", "SerT", "Trh", "Ddc"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

*** Cluster 58
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster58_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("alrm", "Gat", "Gs2", "vir-1"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

*** Cluster 59
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster59_KC-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("prt", "Dop1R2", "rad", "dnc"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

*** Cluster 60
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster60_LQ_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("wrapper", "vir-1", "", "nSyb"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

*** Cluster 61
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster61_Octopaminergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Vmat", "Tdc2", "Tbh", "vg"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 62
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster62_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Burs", "Pburs", "CCAP", "AstC"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 63
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster63_Cholinergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Vmat", "Tdc2", "Tbh", "vg"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 64
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster64_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("ITP", "Lk", "sNPF", "CrebA"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 65
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster65_Serotoninergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Trh", "AstC", "SerT", "Vmat"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 66
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster66_Ring-Gland_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("spok", "phm", "nvd", "ouib"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 67
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster67_Lymph_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Mdr65", "SPARC", "moody", "santa-maria"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 68
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster68_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "jim", "pdm3"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 69
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster69_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "jim", "scro"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 70
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster70_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Npc2a", "wrapper", "santa-maria", "apolpp"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 71
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster71_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "unk", "Thor", "REPTOR-BP"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 72
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster72_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "jim", "pdm3"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 73
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster73_Immature-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "jim", "pdm3"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 74
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster74_PTG_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("spok", "ouib", "phm", "nvd"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 75
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster75_Lymph_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("hdc", "cib", "jim", "pdm3"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 76
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster76_Lymph_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Cht2", "regucalcin", "SPARC", "Idgf4"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 77
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster78_Glia_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("wrapper", "regucalcin", "SPARC", "Idgf4"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

*** Cluster 78
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster78_Octopaminergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Vmat", "Tdc2", "Tbh", "vg"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC

*** Cluster 79
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster79_Motorneurons-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Proc", "twit", "VGlut", "vg"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 80
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster80_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Burs", "Pburs", "AstCC", "AstC"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 81
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster81_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("dimm", "prt", "CrebA", "Gpb5"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 82
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster82_Epithelial-trachea_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("drd", "Gasp", "verm", "pio"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 83
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster83_NPCs_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("N", "pros", "insb", "ase"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 84
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster84_Lymph_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Idgf2", "Idgf4", "Npc2b", "Mdr65"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 85
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster85_Clock-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Pdfr", "tim", "Pdf", "cwo"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 86
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster81_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("dimm", "prt", "CrebA", "Gpb5"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 87
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster87_Octopaminergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("Vmat", "Tdc2", "Tbh", "twit"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 88
#+BEGIN_SRC R :results graphics file :file ./atlases_Cluster88_Peptidergic-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(atlases, features = c("ITP", "Lk", "CNMaR", "Gr28b"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Cluster 89
#+BEGIN_SRC R :results graphics file :file ./atlases_L1_para-Neurons_UMAP.png :width 1000 :height 1000
FeaturePlot(l1, features = c("para"), label= TRUE, repel= TRUE, raster=FALSE)
#+END_SRC
*** Save idents
#+begin_src R :results output
atlases[["named_clusters"]] <- Idents(atlases)
#+end_src

#+RESULTS:
** Remove low quality clusters
#+begin_src R :results output
atlases_copy <- atlases
atlases <- subset(atlases, idents="Low qual", invert=TRUE)
atlases
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 131077 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap

** UMAP labeled
#+begin_src R :results graphics file :file ./atlases_UMAP_plot_rPCA_labeled.pdf :width 22 :height 15
DimPlot(atlases, reduction = "umap", label=TRUE, repel=TRUE, pt.size=0.1, raster=FALSE)
#+end_src

#+RESULTS:
[[file:./atlases_UMAP_plot_rPCA_labeled.pdf]]

#+begin_src R :results graphics file :file ./atlases_UMAP_plot_rPCA.svg :width 10 :height 7
cls <- as.vector(rep("grey95", times=90))
DimPlot(atlases, reduction = "umap", cols=cls, pt.size=0.1, label=FALSE, repel=TRUE, raster=FALSE, shuffle=TRUE) + NoLegend()
#+end_src

#+RESULTS:
[[file:./atlases_UMAP_plot_rPCA_labeled.pdf]]

#+BEGIN_SRC R :results graphics file :file ./atlases_epithelial_UMAP.svg :width 10 :height 7
FeaturePlot(atlases, features = c("pio", "knk"), label= FALSE, repel= TRUE, raster=FALSE, order=TRUE, pt.size=0.1, cols=c("grey99", "#8fa800"), label.size = 0) + NoLegend() + NoAxes() + labs(title = NULL)
#+END_SRC
** Samples per cluster
#+begin_src R :results output
table(atlases@meta.data$named_clusters, atlases@meta.data$stage)
#+end_src

#+RESULTS:
#+begin_example

                        1h  24h  48h
  0 Immat N            477 1641 3589
  1 Cholinergic N     1123 1676 2155
  2 NPCs                49 2000 2852
  3 Cholinergic N     1519 1289 1942
  4 Cholinergic N      915 1706 2044
  5 Immat N             38 1523 2791
  6 GABAergic N       1749 1267 1254
  7 GABAergic N        855 1492 1770
  9 Immat N             40  579 3222
  10 Glutamatergic N   629 1683 1474
  11 NPCs               15 2077 1524
  12 KC N              194 1095 2314
  13 Undet N             3 3225   62
  14 Immat N             2  567 2688
  15 Neuro-Epi OL       49 1811 1380
  16 Immat N             0 3111   40
  17 Immat N             0    2 3107
  18 Undet N             3 3016   55
  19 Immat N            12   20 3029
  20 Cholinergic N     417 1386 1218
  21 GABAergic N       949 1185  877
  22 Motorneurons      847 1072  958
  23 Undet N             0 2837   28
  24 KC N               51 1354 1201
  25 Glutamatergic N   896  715  977
  26 Glia              148 1056 1378
  27 Glia              187  359 1994
  28 Hemocytes         109 1177  919
  29 Immat N             0 1899   40
  30 Immat N             0    0 1884
  31 Cholinergic N     803  534  500
  33 Immat N             0    1 1609
  34 Immat N            14  373 1201
  35 Glia              126  493  930
  36 Undet N            38  226 1274
  37 Immat N             0   14 1468
  38 Glia                7  638  786
  39 Cholinergic N     772  325  302
  40 NPCs              424  294  550
  41 NPCs               57  852  308
  42 Neuroepi Trachea    0  994  133
  43 Dopaminergic N    164  605  344
  44 Peptidergic N      68  694  226
  45 Cholinergic N     164  518  282
  46 Undet N           528  211  148
  49 Peptidergic IPCs  175  429  237
  50 Glia              118  402  321
  51 Immat N            20  373  398
  52 Glia                2  339  426
  53 Peptidergic N     140  380  208
  54 Undet N             3   25  631
  55 Lymph             121  189  336
  56 Hemocytes           0  536   71
  57 Serotoninergic N  104  273  173
  58 Glia               19   47  473
  59 KC N                9  277  179
  61 Octopaminergic N   43  148   85
  62 Peptidergic N      41   59   37
  63 Octopaminergic N   48   43   31
  64 Peptidergic N       1   72   31
  65 Serotoninergic N   10   65   26
  66 Ring Gland         11   25    7
#+end_example

#+begin_src R :results graphics file :file ./atlases_cluster_distribution_stage.png :width 2000 :height 1000
plot_integrated_clusters(atlases)
#+end_src
** Feature plots gene sets

#+begin_src R :results output
# Select genes of interest
gene.set <- c("wrapper", "alrm", "repo", "sad", "Col4a1")

# Get mean expression of genes of interest per cell
mean.exp <- colMeans(x = atlases@assays$RNA[gene.set, ], na.rm = TRUE)

# Add mean expression values in 'object@meta.data$gene.set.score'
if (all(names(x = mean.exp) == rownames(x = atlases@meta.data))) {
  cat("Cell names order match in 'mean.exp' and 'object@meta.data':\n",
      "adding gene set mean expression values in 'object@meta.data$gene.set.score'")
  atlases@meta.data$gene.set.score <- mean.exp
}
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./atlases_all_lymph-feature_plot.pdf :width 20 :height 10
FeaturePlot(object = atlases, features = "gene.set.score", label=FALSE, raster=FALSE, min.cutoff = 0)
#+end_src

#+RESULTS:
min.cutoff="q10", blend.threshold = 1)
#+begin_src R :results graphics file :file ./immat-npcs_feature_plot.pdf :width 30 :height 10
FeaturePlot(atlases, features = c("hdc", "N"),
            blend =TRUE, raster=FALSE)
#+end_src

#+RESULTS:
[[file:./immat-npcs_feature_plot.pdf]]

#+begin_src R :results graphics file :file ./RGL_feature_plot.pdf :width 7 :height 5
FeaturePlot(atlases, features = c("spok"), raster=FALSE, keep.scale="feature",   min.cutoff="q0", order= FALSE)
#+end_src

#+RESULTS:
[[file:./RGL_feature_plot.pdf]]

** General class markers dotplot

General markers
#+begin_src R :results output
DefaultAssay(atlases) <- "RNA"
subclass.markers <- FindAllMarkers(object = atlases, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "superclass.markers_pct20.xlsx")
#+end_src


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 20, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./superclass_markers_dotplot.pdf :width 20 :height 5
DotPlot(atlases, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./superclass_markers_dotplot.pdf]]

#+begin_src R :results output
superclass_markers <- read_all_sheets("superclass.markers_pct20.xlsx")
#+end_src

#+RESULTS:

#+begin_src R :results output
superclass_markers <- map(superclass_markers, ~slice_max(.x, n = 20, order_by = avg_log2FC))
#+end_src

#+RESULTS:
Neuronal
#+begin_src R :results output
superclass_markers_n <- superclass_markers[c("Mat N", "Immat N","NPCs")]
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(superclass_markers_n)){
  mks <- c(mks, superclass_markers_n[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:


#+begin_src R :results graphics file :file ./superclass_neural_markers_dotplot.pdf :width 15 :height 5
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./superclass_neural_markers_dotplot.pdf]]

Non Neuronal
#+begin_src R :results output
superclass_markers_nn <- superclass_markers[c("Glia", "Hemo", "RGL")]
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(superclass_markers_nn)){
  mks <- c(mks, superclass_markers_nn[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:


#+begin_src R :results graphics file :file ./superclass_nonneural_markers_dotplot.pdf :width 15 :height 5
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./superclass_nonneural_markers_dotplot.pdf]]

** Gene centric cluster expression
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_cluster_de <- read_all_sheets("atlases_rPCA.markers_67.xlsx")
#+end_src

#+RESULTS:


Gather in one df
#+begin_src R :results outputs
atlases_cluster_de <- map_df(atlases_cluster_de, rbind, .id="clustern")
#+end_src

#+RESULTS:


Remove number of the name to have cluster name
#+begin_src R :results output
atlases_cluster_de$clustern <- gsub("[0-9]+\\s", "", atlases_cluster_de$clustern)
#+end_src

#+RESULTS:


Filter the ones with < 1 avg_log2FC
#+begin_src R :results output
#atlases_cluster_de <- atlases_cluster_de %>% filter(avg_log2FC >=1)
#+end_src

#+RESULTS:
Save Markers
#+begin_src R :results silent
write.xlsx(atlases_cluster_de, file = "DE_genes_cluster_for_specific.xlsx")
#+end_src

* Fig 2 Mature Neurons

Dotplot with mature neuron markers
#+begin_src R :results graphics file :file ./atlases_matneu-markers_dotplot.png :width 2000 :height 1500
DefaultAssay(atlases) <- "RNA"
DotPlot(atlases, features = functional_neurons.m, col.min = 0, cluster.idents = FALSE, dot.min = 0, scale.by = "size") + RotatedAxis()
#+end_src

#+RESULTS:


** Subset mature neurons
Let's select Annotated neuron clusters
#+begin_src R :results output
ann_neuron_clusters <- c("1 Cholinergic N",
                     "3 Cholinergic N",
                     "4 Cholinergic N",
                     "20 Cholinergic N",
                     "31 Cholinergic N",
                     "39 Cholinergic N",
                     "45 Cholinergic N",
                     "12 KC N",
                     "24 KC N",
                     "59 KC N",
                     "6 GABAergic N",
                     "7 GABAergic N",
                     "21 GABAergic N",
                     "10 Glutamatergic N",
                     "25 Glutamatergic N",
                     "22 Motorneurons",
                     "44 Peptidergic N",
                     "49 Peptidergic IPCs",
                     "53 Peptidergic N",
                     "62 Peptidergic N",
                     "64 Peptidergic N",
                     "43 Dopaminergic N",
                     "57 Serotoninergic N",
                     "65 Serotoninergic N",
                     "61 Octopaminergic N",
                     "63 Octopaminergic N")
#+end_src

#+RESULTS:

#+begin_src R :results output
matneu <- subset(atlases, idents = ann_neuron_clusters)
#+end_src

#+RESULTS:

#+begin_src R :results output
matneu
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 53873 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap


#+begin_src R :results output
Idents(object = matneu) <- "named_clusters"
#+end_src

#+RESULTS:

#+BEGIN_SRC R :results graphics file :file ./Mature_neurons_UMAP_plot.pdf :height 10 :width 20
DefaultAssay(matneu) <- "integrated"
DimPlot(matneu, reduction = "umap", label=TRUE, repel=TRUE, pt.size=0.1, label.size = 5)
#+END_SRC

#+RESULTS:
[[file:./Mature_neurons_UMAP_plot.pdf]]


Remove cells co-cluster with non mature neurons
#+begin_src R :results output
matneu <- subset(matneu, subset = UMAP_2 < 3 & UMAP_1 < 9)
#+end_src

#+RESULTS:

#+BEGIN_SRC R :results graphics file :file ./Mature_neurons_UMAP_plot.png :height 1000 :width 2000
DefaultAssay(matneu) <- "integrated"
DimPlot(matneu, reduction = "umap", label=TRUE, repel=TRUE)
#+END_SRC


#+BEGIN_SRC R :results graphics file :file ./Mature_neurons_UMAP_plot_stage.png :height 1000 :width 1500
DefaultAssay(matneu) <- "integrated"
DimPlot(matneu, reduction = "umap", label=TRUE, repel=TRUE, split.by="stage")
#+END_SRC

** Plot big classes
#+BEGIN_SRC R :results graphics file :file ./Mature_neurons_big_classes_features_UMAP.png :height 1000 :width 1000
DefaultAssay(matneu) <- "RNA"
fts = c("VAChT", "Gad1", "VGlut", "Vmat")
FeaturePlot(matneu, features = fts, label=TRUE, repel=TRUE)
#+END_SRC

#+RESULTS:
[[file:./Mature_neurons_UMAP_labeled.pdf]]

** Find cluster markers
#+BEGIN_SRC R :results silent
# find markers for every cluster compared to all remaining cells, report only the positive ones
DefaultAssay(matneu) <- "RNA"
matneu.markers <- FindAllMarkers(object = matneu, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE)
#+END_SRC


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
matneu.markers <- left_join(matneu.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
matneu.markers_list <- split(matneu.markers, matneu.markers$cluster)
write.xlsx(matneu.markers_list, file = "matneu_rPCA.markers.xlsx")
#+end_src
** Rename clusters

Only subclasses
#+begin_src R :results output
new.cluster.ids <- c()
names(new.cluster.ids) <- levels(matneu)
matneu <- RenameIdents(matneu, new.cluster.ids)
#+end_src

Collapse
#+begin_src R :results output
new.cluster.ids <- c("Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "Cholinergic N",
                     "KC N",
                     "KC N",
                     "KC N",
                     "GABAergic N",
                     "GABAergic N",
                     "GABAergic N",
                     "Glutamatergic N",
                     "Glutamatergic N",
                     "Motorneurons",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Peptidergic N",
                     "Monoaminergic N",
                     "Monoaminergic N",
                     "Monoaminergic N",
                     "Monoaminergic N",
                     "Monoaminergic N")
names(new.cluster.ids) <- levels(matneu)
matneu <- RenameIdents(matneu, new.cluster.ids)
#+end_src

#+RESULTS:


Reorder
#+begin_src R :results output
Idents(matneu) <- "seurat_clusters"
my_levels <- c(1, 3, 4, 20, 31, 39, 45, 12, 24, 59, 6, 7, 21, 10, 25, 22, 44, 49, 53, 62, 64, 43, 57, 65, 61, 63)
matneu@active.ident <- factor(x = matneu@active.ident, levels = my_levels)
#+end_src

#+RESULTS:

#+begin_src R :results output
new.cluster.ids <- c("Cholinergic N (1)",
                     "Cholinergic N (3)",
                     "Cholinergic N (4)",
                     "Cholinergic N (20)",
                     "Cholinergic N (31)",
                     "Cholinergic N (39)",
                     "Cholinergic N (45)",
                     "KC N (12)",
                     "KC N (24)",
                     "KC N (59)",
                     "GABAergic N (6)",
                     "GABAergic N (7)",
                     "GABAergic N (21)",
                     "Glutamatergic N (10)",
                     "Glutamatergic N (25)",
                     "Motorneurons (22)",
                     "Peptidergic N (44)",
                     "Peptidergic N (49)",
                     "Peptidergic N (53)",
                     "Peptidergic N (62)",
                     "Peptidergic N (64)",
                     "Dopaminergic N (43)",
                     "Serotoninergic N (57)",
                     "Serotoninergic N (65)",
                     "Octopaminergic N (61)",
                     "Octopaminergic N (63)"
                     )
names(new.cluster.ids) <- levels(matneu)
matneu <- RenameIdents(matneu, new.cluster.ids)
#+end_src

#+RESULTS:

** General markers dotplot
Remove Undetermined for plotting
#+begin_src R :results output
#matneu <- subset(matneu, idents= "Undet N", invert= TRUE)
matneu <- subset(matneu, idents= c("Undet N"), invert= TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(matneu) <- "RNA"
subclass.markers <- FindAllMarkers(object = matneu, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "matneu_subclass.markers_pct20.xlsx")
#+end_src

#+begin_src R :results output
chol_clusts <- c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N")
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% filter(cluster == "Peptidergic N") %>%  slice_max(n = 39, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Order the Idents
#+begin_src R :results output
my_levels <- c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N",
               "12 KC N",
               "24 KC N",
               "59 KC N",
               "6 GABAergic N",
               "7 GABAergic N",
               "21 GABAergic N",
               "10 Glutamatergic N",
               "25 Glutamatergic N",
               "22 Motorneurons",
               "44 Peptidergic N",
               "49 Peptidergic N",
               "53 Peptidergic N",
               "62 Peptidergic N",
               "64 Peptidergic N",
               "43 Dopaminergic N",
               "57 Serotoninergic N",
               "65 Serotoninergic N",
               "61 Octopaminergic N")
Idents(matneu) <- factor(Idents(matneu), levels= my_levels)
#+end_src

#+RESULTS:


#+begin_src R :results graphics file :file ./Pepti_subclass_markers_dotplot.pdf :width 30 :height 7
DotPlot(matneu, features = top$gene,  dot.scale = 6, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./Pepti_subclass_markers_dotplot.pdf]]
** Superclass markers dotplot

#+begin_src R :results output
matneu_markers <- read_all_sheets("matneu_subclass.markers_pct20.xlsx")
#+end_src

#+RESULTS:

Reorder
#+begin_src R :results output
matneu_markers <- matneu_markers[c("Cholinergic N", "KC N", "GABAergic N", "Glutamatergic N", "Motorneurons", "Peptidergic N", "Monoaminergic N")]
#+end_src

#+RESULTS:

Get top  per class
#+begin_src R :results output
matneu_markers <- map(matneu_markers, ~slice_max(.x, n = 10, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(matneu_markers)){
  mks <- c(mks, matneu_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

Add more recognizable KC markers
#+begin_src R :results output
mks <- c("CG31221", "VAChT", "ChAT", "Hs3st-A", "Hsp67Bc", "beat-IIIc",
 "Ace", "jeb", "heph", "CG14762", "CG14989", "Gad1", "CG10804",
 "CG32017", "CG13739", "Rbp6","CG32225", "Ssadh", "Corin", "beat-Ic", "CG9674",
 "CG46448", "VGlut", "CG34355", "grn", "beat-IIa", "rut", "Rgk1", "jdp", "mub",
 "Dop1R2", "pros", "sNPF", "Mef2", "qm", "Pka-C1","twit", "Proc",
 "AnxB9", "CG42394", "CG14274", "CG10527", "Tsp42Ef", "rhea", "stai",
 "Vmat", "Tdc2", "DAT", "Trh", "SerT", "Ddc", "CG2269",
 "JhI-21", "Pcd", "vvl", "7B2","CG12239","Gpb5", "CG4577", "GstD1",
 "CrebA", "amon", "Pal2", "CG1572")
#+end_src

#+RESULTS:




#+begin_src R :results graphics file :file ./matneu_superclass_markers_dotplot.pdf :width 15 :height 5
DotPlot(atlases, features = mks,  idents=c("Chol N", "GABA N", "Glut N", "KCs N", "Motor N", "Monoa N", "Pept N"), dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./matneu_superclass_markers_dotplot.pdf]]

** Individual classes clusters dotplot
Load makers
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_cluster_markers <- read_all_sheets("atlases_rPCA.markers_67.xlsx")
#+end_src

#+RESULTS:

*** Cholinergic
Keep cholinergic markers
#+begin_src R :results output
chol_markers <- atlases_cluster_markers[grep("Chol", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
chol_markers <- map(chol_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
chol_markers <- map(chol_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(chol_markers)){
  mks <- c(mks, chol_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./chol_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./chol_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src

*** Kcs
Keep KCs
#+begin_src R :results output
kc_markers <- atlases_cluster_markers[grep("KC", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:

Take top 15
#+begin_src R :results output
kc_markers <- map(kc_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
kc_markers <- map(kc_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
kc_markers <- map(kc_markers, ~slice_max(.x, n = 40, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(kc_markers)){
  mks <- c(mks, kc_markers[[i]]$gene)
}
mks <-c("dlp", "CG32647", unique(mks), "Lcch3")
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./kcs_subclass_markers_dotplot.pdf :width 20 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./kcs_subclass_markers_dotplot.pdf]]


Search Individual cluster markers
#+begin_src R :results output
kcs <- subset(atlases, idents=c("12 KC N", "24 KC N", "59 KC N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(kcs) <- "RNA"
subclass.markers <- FindAllMarkers(object = kcs, logfc.threshold = 0, test.use = "wilcox", min.pct = 0, min.diff.pct = 0, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:
: Error in left_join(selective, snaps, by = c(gene = "GeneSymbol"), copy = TRUE) :
:   object 'selective' not found

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_kcs_cluster_markers.xlsx")
#+end_src

*** Gabaergic
Keep gaba markers
#+begin_src R :results output
gaba_markers <- atlases_cluster_markers[grep("GABA", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:

Take top 15
#+begin_src R :results output
gaba_markers <- map(gaba_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
gaba_markers <- map(gaba_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(gaba_markers)){
  mks <- c(mks, gaba_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./gaba_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./gaba_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
gabas <- subset(atlases, idents=c("6 GABAergic N", "7 GABAergic N", "21 GABAergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(gabas) <- "RNA"
subclass.markers <- FindAllMarkers(object = gabas, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_gabas_cluster_markers.xlsx")
#+end_src

*** Glutamatergic
Keep Gluts
#+begin_src R :results output
gluts_markers <- atlases_cluster_markers[grep("Glut", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:

#+begin_src R :results output
gluts_markers <- map(gluts_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
gluts_markers <- map(gluts_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(gluts_markers)){
  mks <- c(mks, gluts_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./gluts_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./gluts_subclass_markers_dotplot.pdf]]

#+begin_src R :results output
gluts <- subset(atlases, idents=c("10 Glutamatergic N", "25 Glutamatergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(gabas) <- "RNA"
subclass.markers <- FindAllMarkers(object = gluts, logfc.threshold = 0, test.use = "wilcox", min.pct = 0, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_gluts_cluster_markers.xlsx")
#+end_src

*** Motorneurons
Keep Gluts
#+begin_src R :results output
motor_markers <- atlases_cluster_markers[grep("Motor", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:

#+begin_src R :results output
motor_markers <- map(motor_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
motor_markers <- map(motor_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(motor_markers)){
  mks <- c(mks, motor_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./motor_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./motor_subclass_markers_dotplot.pdf]]
*** Peptidergic
Keep Pepti
#+begin_src R :results output
pepti_markers <- atlases_cluster_markers[grep("Pept", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
pepti_markers <- map(pepti_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
pepti_markers <- map(pepti_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(pepti_markers)){
  mks <- c(mks, pepti_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./pepti_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./pepti_subclass_markers_dotplot.pdf]]
*** Dopaminergic
#+begin_src R :results output
dopa_markers <- atlases_cluster_markers[grep("Dopa", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
dopa_markers <- map(dopa_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
dopa_markers <- map(dopa_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(dopa_markers)){
  mks <- c(mks, dopa_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./dopa_subclass_markers_dotplot.pdf :width 20 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./dopa_subclass_markers_dotplot.pdf]]

*** Serotoninergic
#+begin_src R :results output
serot_markers <- atlases_cluster_markers[grep("Serot", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
serot_markers <- map(serot_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
serot_markers <- map(serot_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(serot_markers)){
  mks <- c(mks, serot_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./serot_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./serot_subclass_markers_dotplot.pdf]]

*** Octopaminergic
#+begin_src R :results output
octo_markers <- atlases_cluster_markers[grep("Octop", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:

#+begin_src R :results output
octo_markers <- map(octo_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
octo_markers <- map(octo_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(octo_markers)){
  mks <- c(mks, octo_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./octo_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./octo_subclass_markers_dotplot.pdf]]
*** Undetermined
#+begin_src R :results output
undet_markers <- atlases_cluster_markers[grep("Undet", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:

#+begin_src R :results output
undet_markers <- map(undet_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
undet_markers <- map(undet_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(undet_markers)){
  mks <- c(mks, undet_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./undet_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./undet_subclass_markers_dotplot.pdf]]
** Subclasses among dotplots
Load makers
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_cluster_markers <- read_all_sheets("atlases_rPCA.markers_67.xlsx")
#+end_src

#+RESULTS:

*** Cholinergic
#+begin_src R :results output
chols <- subset(matneu, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "chols.among_pct20.xlsx")
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./chols_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(chols, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./chols_among_markers_dotplot.pdf]]

Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

*** Gabaergic
#+begin_src R :results output
gabas <- subset(atlases, idents=c("6 GABAergic N",
                                 "7 GABAergic N",
                                 "21 GABAergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(gabas) <- "RNA"
subclass.markers <- FindAllMarkers(object = gabas, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "gabas.among_pct20.xlsx")
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 30, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./gabas_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(gabas, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./gabas_among_markers_dotplot.pdf]]

*** Glutamatergic
#+begin_src R :results output
gluts <- subset(matneu, idents=c("10 Glutamatergic N",
                                 "25 Glutamatergic N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(gluts) <- "RNA"
subclass.markers <- FindAllMarkers(object = gluts, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "gluts.among_pct20.xlsx")
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./gluts_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(gluts, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./gluts_among_markers_dotplot.pdf]]

*** KCs
#+begin_src R :results output
kc_markers <- atlases_cluster_markers[grep("KC", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
kc_markers <- map(kc_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:


Keep only selective KC markers
#+begin_src R :results output
non_kc_markers <- atlases_cluster_markers[grep("KC", names(atlases_cluster_markers))]
#+end_src





#+begin_src R :results output
kcs <- subset(matneu, idents=c("12 KC N", "24 KC N", "59 KC N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(kcs) <- "RNA"
subclass.markers <- FindAllMarkers(object = kcs, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "kcs.among_pct20.xlsx")
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./kcs_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(kcs, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./kcs_among_markers_dotplot.pdf]]

*** Peptidergic
#+begin_src R :results output
peptis <- subset(matneu, idents=c("44 Peptidergic N", "49 Peptidergic IPCs", "53 Peptidergic N", "62 Peptidergic N", "64 Peptidergic N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(peptis) <- "RNA"
subclass.markers <- FindAllMarkers(object = peptis, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "peptis.among_pct20.xlsx")
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./peptis_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(peptis, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./peptis_among_markers_dotplot.pdf]]
*** Serotoninergic
#+begin_src R :results output
seros <- subset(matneu, idents=c("57 Serotoninergic N", "65 Serotoninergic N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(seros) <- "RNA"
subclass.markers <- FindAllMarkers(object = seros, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "seros.among_pct20.xlsx")
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./seros_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(seros, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./seros_among_markers_dotplot.pdf]]
*** Octopaminergic
#+begin_src R :results output
octos <- subset(matneu, idents=c("61 Octopaminergic N","63 Octopaminergic N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(octos) <- "RNA"
subclass.markers <- FindAllMarkers(object = octos, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "octos.among_pct20.xlsx")
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./octos_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(octos, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./octos_among_markers_dotplot.pdf]]
*** Undetermined
#+begin_src R :results output
undet <- subset(atlases, idents=c(
                     "13 Undet N",
                     "18 Undet N",
                     "23 Undet N",
                     "36 Undet N",
                     "46 Undet N",
                     "54 Undet N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(undet) <- "RNA"
subclass.markers <- FindAllMarkers(object = undet, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, max.cells.per.ident = 2000)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "undet.among_pct20.xlsx")
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./undet_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(undet, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./undet_among_markers_dotplot.pdf]]
* Fig 3 KCs
** Subset KCs
Let's select Annotated neuron clusters
#+begin_src R :results output
kc_clusters <- c(12, 24, 59)
#+end_src

#+RESULTS:

#+begin_src R :results output
Idents(object = atlases) <- "seurat_clusters"
kcs <- subset(atlases, idents = kc_clusters)
#+end_src

#+RESULTS:

#+begin_src R :results output
kcs
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 6674 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap


#+begin_src R :results output
Idents(object = kcs) <- "named_clusters"
#+end_src

#+RESULTS:

#+BEGIN_SRC R :results graphics file :file ./Kc_UMAP_plot_per_stage.pdf :height 10 :width 20
DefaultAssay(kcs) <- "integrated"
DimPlot(kcs, reduction = "umap", label=FALSE, repel=TRUE, pt.size=0.1, split.by="stage")
#+END_SRC

#+RESULTS:
[[file:./Kc_UMAP_plot_per_stage.pdf]]


Remove cells co-cluster with non mature neurons
#+begin_src R :results output
matneu <- subset(matneu, subset = UMAP_2 < 3 & UMAP_1 < 9)
#+end_src
** Temporal per cluster
*** KCs 12
1vs24h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc12 <- subset(atlases, idents=12)
   Idents(object = kc12) <- "stage"
   kc12temp <-
   FindMarkers(kc12, ident.1="1h",
               ident.2="24h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc12temp$gene <- rownames(kc12temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc12temp, file = "kc12.temp.1h_vs_24_wilcox.xlsx", overwrite=TRUE)
#+end_src

24vs1h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc12 <- subset(atlases, idents=12)
   Idents(object = kc12) <- "stage"
   kc12temp <-
   FindMarkers(kc12, ident.1="24h",
               ident.2="1h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc12temp$gene <- rownames(kc12temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc12temp, file = "kc12.temp.24h_vs_1_wilcox.xlsx", overwrite=TRUE)
#+end_src

Choose cleanest
#+begin_src R :results output
top <- kc12temp %>% slice_max(n = 60, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./kcs12_24vs1_temp_dotplot.pdf :width 20 :height 5
DotPlot(atlases, features = unique(top$gene),  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./kcs_24vs1_temp_dotplot.pdf]]





1vs48h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc12 <- subset(atlases, idents=12)
   Idents(object = kc12) <- "stage"
   kc12temp <-
   FindMarkers(kc12, ident.1="1h",
               ident.2="48h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc12temp$gene <- rownames(kc12temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc12temp, file = "kc12.temp.1h_vs_48_wilcox.xlsx", overwrite=TRUE)
#+end_src

48hvs1h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc12 <- subset(atlases, idents=12)
   Idents(object = kc12) <- "stage"
   kc12temp <-
   FindMarkers(kc12, ident.1="48h",
               ident.2="1h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc12temp$gene <- rownames(kc12temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc12temp, file = "kc12.temp.48h_vs_1h_wilcox.xlsx", overwrite=TRUE)
#+end_src

24hvs48h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc12 <- subset(atlases, idents=12)
   Idents(object = kc12) <- "stage"
   kc12temp <-
   FindMarkers(kc12, ident.1="24h",
               ident.2="48h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc12temp$gene <- rownames(kc12temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc12temp, file = "kc12.temp.24h_vs_48h_wilcox.xlsx", overwrite=TRUE)
#+end_src

48hvs24h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc12 <- subset(atlases, idents=12)
   Idents(object = kc12) <- "stage"
   kc12temp <-
   FindMarkers(kc12, ident.1="48h",
               ident.2="24h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc12temp$gene <- rownames(kc12temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc12temp, file = "kc12.temp.48h_vs_24h_wilcox.xlsx", overwrite=TRUE)
#+end_src

*** KCs 24
24hvs48h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc24 <- subset(atlases, idents=24)
   Idents(object = kc24) <- "stage"
   kc24temp <-
   FindMarkers(kc12, ident.1="24h",
               ident.2="48h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc24temp$gene <- rownames(kc24temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc12temp, file = "kc24.temp.24h_vs_48h_wilcox.xlsx", overwrite=TRUE)
#+end_src

48hvs24h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc24 <- subset(atlases, idents=24)
   Idents(object = kc24) <- "stage"
   kc24temp <-
   FindMarkers(kc12, ident.1="48h",
               ident.2="24h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc24temp$gene <- rownames(kc24temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc24temp, file = "kc24.temp.48h_vs_24h_wilcox.xlsx", overwrite=TRUE)
#+end_src

 Choose cleanest
#+begin_src R :results output
top <- kc24temp %>% slice_max(n = 60, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./kcs24_48vs24_temp_dotplot.pdf :width 20 :height 5
DotPlot(atlases, features = unique(top$gene),  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./kcs24_48vs24_temp_dotplot.pdf]]

*** KCs 59
24hvs48h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc59 <- subset(atlases, idents=59)
   Idents(object = kc59) <- "stage"
   kc59temp <-
   FindMarkers(kc12, ident.1="24h",
               ident.2="48h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc59temp$gene <- rownames(kc59temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc59temp, file = "kc59.temp.24h_vs_48h_wilcox.xlsx", overwrite=TRUE)
#+end_src

48hvs24h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
   kc59 <- subset(atlases, idents=59)
   Idents(object = kc59) <- "stage"
   kc59temp <-
   FindMarkers(kc12, ident.1="48h",
               ident.2="24h",
               logfc.threshold = 0.1,
               test.use = "wilcox",
               min.pct = 0.1,
               min.diff.pct = 0.1,
               assay = "RNA",
               verbose = FALSE,
               return.thresh = 0.0501,
               only.pos = TRUE)
#+end_src

#+RESULTS:

#+begin_src R :results output
kc59temp$gene <- rownames(kc59temp)
#+end_src

#+RESULTS:

#+begin_src R :results silent
write.xlsx(kc59temp, file = "kc59.temp.48h_vs_24h_wilcox.xlsx", overwrite=TRUE)
#+end_src

 Choose cleanest
#+begin_src R :results output
top <- kc59temp %>% slice_max(n = 60, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./kcs59_48vs24_temp_dotplot.pdf :width 20 :height 5
DotPlot(atlases, features = unique(top$gene),  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./kcs59_48vs24_temp_dotplot.pdf]]
** KC Clusters among dotplot
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:

Read markers
#+begin_src R :results output
kcs_among <- read_all_sheets("kcs.among_pct20.xlsx")
#+end_src

#+RESULTS:

#+begin_src R :results output
kcs_among <- map(kcs_among, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:



#+begin_src R :results output
kcs_among <- map(kcs_among, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:



#+begin_src R :results output
kcs_among <- map(kcs_among, ~slice_max(.x, n=20, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(kcs_among)){
  mks <- c(mks, kcs_among[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:


Plot only against mature neurons
#+begin_src R :results output
kcs <- subset(atlases, idents= c("12 KC N", "24 KC N", "59 KC N"))
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./kcs_alone_among_dotplot_top20.pdf :width 20 :height 5
DotPlot(kcs, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./kcs_alone_among_dotplot_top20.pdf]]
* Fig 4 Glia

Dotplot with glia markers
#+begin_src R :results graphics file :file ./atlases_glia-markers_dotplot.png :width 2000 :height 1500
DefaultAssay(atlases) <- "RNA"
DotPlot(atlases, idents=c(26, 27, 35, 38, 50, 52, 55, 58) , features = glia.m, col.min = 0, cluster.idents = FALSE, dot.min = 0, scale.by = "size") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./atlases_glia-markers_dotplot.png]]

** Subset glia

Let's select Annotated neuron clusters
#+begin_src R :results output
limph_clusters <- c(26, 27, 35, 38, 50, 58, 55)
#+end_src

#+RESULTS:

#+begin_src R :results output
Idents(object = atlases) <- "seurat_clusters"
limph <- subset(atlases, idents = limph_clusters)
#+end_src

#+RESULTS:

#+begin_src R :results output
limph
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 10128 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap

** Plot UMAP
#+begin_src R :results graphics file :file ./limph_UMAP_plot.png :width 2000 :height 1500
DimPlot(limph, reduction = "umap", label=TRUE, repel=TRUE, raster=FALSE)
#+end_src

#+RESULTS:
[[file:./limph_UMAP_plot.png]]

** Center UMAP
#+begin_src R :results output
limph <- subset(limph, subset = UMAP_2 > -4 & UMAP_2 < 10 & UMAP_1 > 1)
#+end_src

#+RESULTS:

** Plot big classes
#+BEGIN_SRC R :results graphics file :file ./limph_big_classes_features_UMAP.png :height 1000 :width 1000
DefaultAssay(limph) <- "RNA"
fts = c("repo", "CG6126", "Indy", "hoe1", "wrapper", "e", "Gs2", "Gat", "Eaat1", "alrm", "Col4a1", "SPARC", "He", "vkg", "nvd", "ouib")
FeaturePlot(limph, features = fts, label=TRUE, repel=TRUE)
#+END_SRC

** Find cluster markers
#+BEGIN_SRC R :results silent
# find markers for every cluster compared to all remaining cells, report only the positive ones
DefaultAssay(limph) <- "RNA"
limph.markers <- FindAllMarkers(object = limph, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE)
#+END_SRC


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
limph.markers <- left_join(limph.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
limph.markers_list <- split(limph.markers, limph.markers$cluster)
write.xlsx(limph.markers_list, file = "limph_rPCA.markers.xlsx", overwrite=TRUE)
#+end_src
** Rename clusters

Set Idents to seurat clusters
#+begin_src R :results output
Idents(object = limph) <- "seurat_clusters"
#+end_src

#+RESULTS:

#+begin_src R :results output
new.cluster.ids <- c("Cortex",
                     "Cortex",
                     "Ensheathing",
                     "Ensheathing",
                     "Astrocyte",
                     "Astrocyte",
                     "Surface")
names(new.cluster.ids) <- levels(limph)
limph <- RenameIdents(limph, new.cluster.ids)
#+end_src

#+RESULTS:
** Plot UMAP
#+begin_src R :results graphics file :file ./Glia_UMAP_plot.pdf :width 20 :height 10
DimPlot(limph, reduction = "umap", label=FALSE, repel=TRUE, raster=FALSE)
#+end_src

#+RESULTS:
[[file:./Glia_UMAP_plot.pdf]]

** Cluster Markers dotplot
#+begin_src R :results graphics file :file ./limph_clusters_dotplot.pdf :width 15 :height 10
DefaultAssay(limph) <- "RNA"
fts <- c("repo",
         "wrapper", "hoe1", "CG31869", "santa-maria", "CG42235",
         "apolpp", "CG43085",
         "Col4a1", "CG5080", "AhcyL1", "Cht2", "SPARC", "CG3168", "vkg",
         "CG34232", "CG30197", "CG7084", "CG9691", "ImpE1",
         "Gat", "alrm", "Gs2", "CG1552", "CG42342", "CG42489", "CG9394",
         "Mdr65", "rost", "CG43778", "Swim", "CG13877", "moody", "ltl",
         "phm", "CG4408", "sad", "nvd", "GstE14", "CG43886", "CG43156", "CG4456")
DotPlot(limph, features = fts,  dot.scale = 10, cols=c("grey95", "#ff451f"))
#+end_src
** UMAP plot labeled
#+BEGIN_SRC R :results graphics file :file ./limph_UMAP_labeled.pdf :height 10 :width 10
DefaultAssay(limph) <- "integrated"
DimPlot(limph, reduction = "umap", label=FALSE, repel=TRUE)
#+END_SRC
** Individual classes clusters dotplot
Load makers
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_cluster_markers <- read_all_sheets("atlases_rPCA.markers_67.xlsx")
#+end_src

#+RESULTS:
*** Search known markers
Search known markers in among

Search known markers in selective
#+begin_src R :results output
glia_markers <-  atlases_cluster_markers %>%
                    map_df(., rbind) %>%
                    group_by(cluster) %>%
                    filter(cluster %in% c(26, 27, 35, 38, 50, 52, 55 ,58) &
                           gene %in% c(
                                   "repo",
                                   "ttk"
                                   "sli", # slit
                                   "wrapper",
                             "alrm",
                             "fabp",
                             "Gs2",
                             "Indy",
                             "Gat",
                             "hoe1",
                             "e",
                             "wun2",
                             "Eaat1",
                             "slit",
                             "CG6126",
                             "moody",
                             "Swim",
                             "Mdr65")) %>%
                    select(avg_log2FC, pct.1, pct.2, cluster, gene)

#+end_src

#+RESULTS:

*** Glia 26
Keep cholinergic markers
#+begin_src R :results output
glia26_markers <- atlases_cluster_markers[grep("26 Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
glia26_markers <- map(glia26_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia26_markers <- map(glia26_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia26_markers)){
  mks <- c(mks, glia26_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia26_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia26_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src

*** Glia 27
Keep cholinergic markers
#+begin_src R :results output
glia27_markers <- atlases_cluster_markers[grep("27 Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
glia27_markers <- map(glia27_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia27_markers <- map(glia27_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia27_markers)){
  mks <- c(mks, glia27_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia27_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia27_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src
*** Glia 35
Keep cholinergic markers
#+begin_src R :results output
glia35_markers <- atlases_cluster_markers[grep("35 Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
glia35_markers <- map(glia35_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia35_markers <- map(glia35_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia35_markers)){
  mks <- c(mks, glia35_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia35_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia35_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src
*** Glia 38
Keep cholinergic markers
#+begin_src R :results output
glia38_markers <- atlases_cluster_markers[grep("38 Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
glia38_markers <- map(glia38_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia38_markers <- map(glia38_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia38_markers)){
  mks <- c(mks, glia38_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia38_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia35_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src
*** Glia 50
Keep cholinergic markers
#+begin_src R :results output
glia50_markers <- atlases_cluster_markers[grep("50 Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
glia50_markers <- map(glia50_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia50_markers <- map(glia50_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia50_markers)){
  mks <- c(mks, glia50_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia50_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia35_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src
*** Glia 52
Keep cholinergic markers
#+begin_src R :results output
glia52_markers <- atlases_cluster_markers[grep("52 Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
glia52_markers <- map(glia52_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia52_markers <- map(glia52_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia52_markers)){
  mks <- c(mks, glia52_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia52_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia52_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src
***** Glia 55
*** Glia 58
Keep cholinergic markers
#+begin_src R :results output
glia58_markers <- atlases_cluster_markers[grep("58 Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
glia58_markers <- map(glia58_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia58_markers <- map(glia58_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia58_markers)){
  mks <- c(mks, glia58_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia58_subclass_markers_dotplot.pdf :width 35 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia58_subclass_markers_dotplot.pdf]]

Search Individual cluster markers
#+begin_src R :results output
chols <- subset(atlases, idents=c("1 Cholinergic N",
               "3 Cholinergic N",
               "4 Cholinergic N",
               "20 Cholinergic N",
               "31 Cholinergic N",
               "39 Cholinergic N",
               "45 Cholinergic N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
DefaultAssay(chols) <- "RNA"
subclass.markers <- FindAllMarkers(object = chols, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE, features=mks )
#+end_src

Choose cleanest
#+begin_src R :results output
selective <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


Append the Flybase snapshot description
#+BEGIN_SRC R :results output
selective <- left_join(selective, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
selective_list <- split(selective, selective$cluster)
write.xlsx(selective_list, file = "selective_chol_cluster_markers.xlsx")
#+end_src
*** All glias
#+begin_src R :results output
glias_markers <- atlases_cluster_markers[grep("Glia", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:

Order
#+begin_src R :results output
glias_markers <- glias_markers[c("58 Glia",
                          "50 Glia",
                          "35 Glia",
                          "38 Glia",
                          "26 Glia",
                          "27 Glia",
                          "52 Glia",
                          "55 Glia")]
#+end_src

#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
glias_markers <- map(glias_markers, ~slice_max(.x, n = 20, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glias_markers)){
  mks <- c(mks, glias_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glias_top20_subclass_markers_dotplot.pdf :width 45 :height 15
 DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glias_top20_subclass_markers_dotplot.pdf]]
*** Astrocytes dotplot
#+begin_src R :results output
glias_markers <- atlases_cluster_markers[c("58 Glia",
                          "50 Glia")]
#+end_src

#+RESULTS:

Order
#+begin_src R :results output
glias_markers <- glias_markers[c("58 Glia",
                                 "50 Glia")]
#+end_src

#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
glias_markers <- map(glias_markers, ~slice_max(.x, n = 39, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glias_markers)){
  mks <- c(mks, glias_markers[[i]]$gene)
}
mks <- c(unique(mks), "CG34367", "CG8568")
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./astrocyte_top40_markers_dotplot.pdf :width 20 :height 15
 DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./astrocyte_top40_markers_dotplot.pdf]]
*** Ensheathing dotplot
#+begin_src R :results output
glias_markers <- atlases_cluster_markers[c(
                          "35 Glia",
                          "38 Glia")]
#+end_src


#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
glias_markers <- map(glias_markers, ~slice_max(.x, n = 30, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glias_markers)){
  mks <- c(mks, glias_markers[[i]]$gene)
}
mks <- c("ClC-a", "axo", unique(mks), "CG7860")
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./Ensheathing_top30_markers_dotplot.pdf :width 20 :height 15
 DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./Ensheathing_top30_markers_dotplot.pdf]]
*** Cortex
#+begin_src R :results output
glias_markers <- atlases_cluster_markers[c("26 Glia",
                          "27 Glia",
                          "52 Glia")]
#+end_src


#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
glias_markers <- map(glias_markers, ~slice_max(.x, n = 35, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glias_markers)){
  mks <- c(mks, glias_markers[[i]]$gene)
}
mks <- c(unique(mks), "ZnT77C", "Oatp58Dc", "Dci", "ACC", "CG40470", "CG43448", "CG7997", "CG11594")
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./Cortex_top40_markers_dotplot.pdf :width 20 :height 15
 DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./Cortex_top40_markers_dotplot.pdf]]
*** Surface
#+begin_src R :results output
glias_markers <- atlases_cluster_markers[c("55 Glia")]
#+end_src


#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
glias_markers <- map(glias_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
glias_markers <- map(glias_markers, ~slice_max(.x, n = 60, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glias_markers)){
  mks <- c(mks, glias_markers[[i]]$gene)
}
mks <- c(unique(mks), "CG14855", "CG1299")
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./Surface_top60_markers_dotplot.pdf :width 20 :height 15
 DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./Surface_top60_markers_dotplot.pdf]]

** Glial clusters among markers
#+begin_src R :results output
glias <- subset(atlases, idents=c("26 Glia",
                         "27 Glia",
                         "35 Glia",
                         "38 Glia",
                         "50 Glia",
                         "52 Glia",
                         "55 Glia",
                         "58 Glia"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(glias) <- "RNA"
subclass.markers <- FindAllMarkers(object = glias, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "glias.among_pct20.xlsx")
#+end_src

#+RESULTS:

#+begin_src R :results output
 subclass.markers <- read_all_sheets("glias.among_pct20.xlsx")
#+end_src

#+RESULTS:

Combine in one df
#+begin_src R :results output
 subclass.markers <- map_df(subclass.markers, rbind)
#+end_src

#+RESULTS:

Search known markers in among
#+begin_src R :results output
glia_markers <- subclass.markers %>%
                    group_by(cluster) %>%
                    filter(gene %in%
                           c("wrapper",
                             "alrm",
                             "fabp",
                             "Gs2",
                             "Indy",
                             "Gat",
                             "hoe1",
                             "e",
                             "wun2",
                             "Eaat1",
                             "slit",
                             "CG6126",
                             "moody",
                             "Swim",
                             "Mdr65")) %>%
                    select(avg_log2FC, pct.1, pct.2, cluster, gene)
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 20, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(limph, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia_among_markers_dotplot.pdf]]

Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src
** Hemo dotplot
Load makers
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_cluster_markers <- read_all_sheets("atlases_rPCA.markers_67.xlsx")
#+end_src

#+RESULTS:

Keep hemos  markers
#+begin_src R :results output
hemos_markers <- atlases_cluster_markers[grep("Hemos", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
hemos_markers <- map(hemos_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
hemos_markers <- map(hemos_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(hemos_markers)){
  mks <- c(mks, hemos_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./hemos_subclass_markers_dotplot.pdf :width 55 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#+end_src

#+RESULTS:
[[file:./hemos_subclass_markers_dotplot.pdf]]


Search known markers in selective
#+begin_src R :results output
hemos_markers <-  atlases_cluster_markers %>%
                    map_df(., rbind) %>%
                    group_by(cluster) %>%
                    filter(cluster %in% c(28, 56) &
                           gene %in% c(
                                   "Col4a1",
                                   "SPARC",
                                   "He", # Pan
                                   "hml",
                                       "NimC1",
                                       "Pen",
                                       "polo",
                                       "CycB",
                                       "Mmp1",
                                       "Ance",
                                       "IM18",
                                       "Arc1",
                                       "Mtk",
                                       "Ubx",
                                       "lz",
                                       "peb",
                                       "PPO1",
                                       "PPO2",
                                       "atilla",
                                       "fok",
                                       "betaTub60D")) %>%
                    select(avg_log2FC, pct.1, pct.2, cluster, gene)

#+end_src

#+RESULTS:
s
** Ring gland
#+begin_src R :results output
rgl_markers <- atlases_cluster_markers[grep("RGL", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
rgl_markers <- map(rgl_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
rgl_markers <- map(rgl_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(rgl_markers)){
  mks <- c(mks, rgl_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./rgl_subclass_markers_dotplot.pdf :width 55 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#+end_src

#+RESULTS:
[[file:./rgl_subclass_markers_dotplot.pdf]]

** Individual classes temporal

#+begin_src R :results output
DefaultAssay(limph) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
clustids <- levels(Idents(limph))
wilcox.markers <- list()

for (i in 1:length(clustids)) {
   this_cluster.seu <- subset(limph, idents = clustids[i])
   Idents(object = this_cluster.seu) <- "stage"
   try(wilcox.markers[[clustids[i]]] <-
   as.data.frame(FindMarkers(this_cluster.seu, ident.1= "24h", ident.2="1h", logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, assay = "RNA", verbose = FALSE, return.thresh = 0.0501, only.pos = TRUE)))
   wilcox.markers[[clustids[i]]]$gene <- rownames(wilcox.markers[[clustids[i]]])
}
#+end_src

#+RESULTS:

Save Markers
#+begin_src R :results silent
write.xlsx(wilcox.markers, file = "24h_vs_1h_glia_classes.DE.markers_stage_wilcox.xlsx", overwrite=TRUE)
#+end_src
* Fig 5 NPCs and Immature Neurons
** Subset inmature neurons
#+begin_src R :results output
DefaultAssay(atlases) <- "RNA"
Idents(object = atlases) <- "seurat_clusters"
atlases
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 131077 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap

#+end_src

#+begin_src R :results output
inmat_clusters <- c(0, 2, 5, 9, 11, 14, 15, 16, 17, 19, 29, 30, 33, 34, 37, 40, 41, 42, 51)
#+end_src

#+RESULTS:

#+begin_src R :results output
inmat <- subset(atlases, idents = inmat_clusters)
#+end_src

#+RESULTS:


#+begin_src R :results output
inmat
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 51141 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap

** PCA plot
#+begin_src R :results graphics file :file ./inmat_PCA_plot_rPCA.png :width 2200 :height 1500
DimPlot(inmat, reduction = "pca", label=TRUE, repel=TRUE, raster=FALSE)
#+end_src

#+begin_src R :results output
print(inmat[["pca"]], dims = 1, nfeatures = 50)
#+end_src

#+RESULTS:
#+begin_example
PC_ 1
Positive:  lncRNA:CR34335, Pen, Galphai, ogre, E(spl)mgamma-HLH, E(spl)mbeta-HLH, edl, stg, fru, Tis11
	   CNBP, RpL41, Mcm7, dUTPase, PCNA, Aldh, RpL39, E(spl)m8-HLH, Syp, Nph
	   lncRNA:CR45388, HmgD, feo, mnd, lncRNA:CR30009, Fkbp39, Rac2, jigr1, RpL38, CG6701
	   for, hdly, N, baf, GstD1, CycE, barr, SNRPG, CG13690, His2Av
	   kst, eEF5, Lsd-2, msd1, eEF1beta, awd, RpS27, baz, ken, grh
Negative:  Sap47, nrv3, futsch, Rdl, myr-GFP-p10, para, Hex-A, nAChRalpha6, jeb, nSyb
	   Cngl, sif, Ldh, CG30172, IA-2, kcc, Hr38, Rbp6, Cam, Pdp1
	   Syt1, CG6329, Pkc53E, Ih, CG11319, Pal2, CG44422, CG30116, Cbp53E, shi
	   CG31221, cpx, CG2269, 7B2, Syx1A, Hasp, CG11000, Ank2, dpr9, Atpalpha
	   SK, trv, CG43222, Frq1, beat-IIa, CG13954, bru3, nls-tdTomato, Ald1, Snap25
#+end_example

** UMAP plot
#+begin_src R :results graphics file :file ./inmat_UMAP_plot_rPCA.png :width 2200 :height 1500
DimPlot(inmat, reduction = "umap", label=TRUE, repel=TRUE, raster=FALSE)
#+end_src
** Recenter UMAP
#+begin_src R :results output
inmat <- subset(inmat, subset= UMAP_2 > 0)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./inmat_UMAP_plot_rPCA.png :width 2200 :height 1500
DimPlot(inmat, reduction = "umap", label=TRUE, repel=TRUE, raster=FALSE)
#+end_src

** Plot big classes
#+BEGIN_SRC R :results graphics file :file ./inmat_big_classes_features_UMAP.png :height 3000 :width 2000
DefaultAssay(inmat) <- "RNA"
fts = c("N", "pros", "Pen", "klu", "dpn", "trbl","mira", "insc", "CycE", "wor", "ase", "pnt", "erm", "ham", "Phs", "tap", "dap", "Hey", "fne", "nSyb", "hb", "Kr", "nub", "pdm2", "cas", "grh", "Imp", "Syp", "chinmo", "br")
FeaturePlot(inmat, features = fts, label=TRUE, repel=TRUE)
#+END_SRC
** Rename clusters
#+begin_src R :results output
DefaultAssay(inmat) <- "RNA"
#+end_src

#+RESULTS:

Reorder
#+begin_src R :results output
Idents(inmat) <- "seurat_clusters"
my_levels <- c(0, 9, 14, 16, 17, 19, 29, 30, 33, 34, 37, 51, 5, 2, 40, 41, 11, 15, 42)
inmat@active.ident <- factor(x = inmat@active.ident, levels = my_levels)
#+end_src

#+RESULTS:



#+begin_src R :results output
new.cluster.ids <- c("0 Immature N", # 0
                     "9 Immature N", # 9
                     "14 Immature N", # 14
                     "16 Immature N", # 16
                     "17 Immature N", # 17
                     "19 Immature N", # 19
                     "29 Immature N", # 29
                     "30 Immature N", # 30
                     "33 Immature N", # 33
                     "34 Immature N", # 34
                     "37 Immature N", # 37
                     "51 Immature N",  # 51
                     "5 NPCs ",  # 5
                     "2 NPCs",       # 2
                     "40 NPCs",       # 40
                     "41 NPCs",       # 41
                     "11 NPCs",       # 11
                     "15 NPCs/NE",    # 15
                     "42 NPCs/NE"    # 42
                     )

names(new.cluster.ids) <- levels(inmat)
inmat <- RenameIdents(inmat, new.cluster.ids)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./inmat_neurons_UMAP_plot_labeled.png :width 2000 :height 1500
DimPlot(inmat, reduction = "umap", label=TRUE, repel=TRUE, raster=FALSE)
#+end_src

#+BEGIN_SRC R :results graphics file :file ./immat_neurons_UMAP_labeled.pdf :height 20 :width 30
DefaultAssay(inmat) <- "integrated"
DimPlot(inmat, reduction = "umap", label=FALSE, repel=TRUE)
#+END_SRC

#+RESULTS:
[[file:./immat_neurons_UMAP_labeled.pdf]]

** Markers immat vs npcs
#+RESULTS:
#+begin_src R :results output
new.cluster.ids <- c("Immature N", # 0
                     "NPCs",       # 2
                     "New-borns", # 5
                     "Immature N", # 9
                     "NPCs",       # 11
                     "Immature N", # 14
                     "NPCs", # 15
                     "Immature N", # 16
                     "Immature N", # 17
                     "Immature N", # 19
                     "Immature N", # 29
                     "Immature N", # 30
                     "Immature N", # 33
                     "Immature N", # 34
                     "Immature N", # 37
                     "NPCs",       # 40
                     "NPCs",      # 41
                     "Immature N") # 51

names(new.cluster.ids) <- levels(inmat)
inmat <- RenameIdents(inmat, new.cluster.ids)
#+end_src

#+RESULTS:

#+begin_src R :results output
immat_vs_npcs <- FindMarkers(inmat, ident.1 = "Immature N", ident.2 = "NPCs", logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1)
#+end_src

#+begin_src R :results output
immat_vs_npcs$gene <- rownames(immat_vs_npcs)
#+end_src

#+RESULTS:
Append the Flybase snapshot description
#+BEGIN_SRC R :results output
immat_vs_npcs <- left_join(immat_vs_npcs, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
write.xlsx(immat_vs_npcs, file = "immat_vs_npcs.xlsx")
#+end_src

** Feature plots gene sets
#+begin_src R :results output
# Select genes of interest
gene.set <- c("hdc", "unk", "cib")

# Get mean expression of genes of interest per cell
mean.exp <- colMeans(x = inmat@assays$RNA[gene.set, ], na.rm = TRUE)

# Add mean expression values in 'object@meta.data$gene.set.score'
if (all(names(x = mean.exp) == rownames(x = inmat@meta.data))) {
  cat("Cell names order match in 'mean.exp' and 'object@meta.data':\n",
      "adding gene set mean expression values in 'object@meta.data$gene.set.score'")
  inmat@meta.data$gene.set.score <- mean.exp
}
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./inmat_hdc-feature_plot.pdf :width 20 :height 10
FeaturePlot(object = inmat, features = "gene.set.score", label=FALSE, raster=FALSE, min.cutoff = 2.5)
#+end_src

#+begin_src R :results graphics file :file ./inmat_GMCs-feature_plot.png :width 1000 :height 2000
FeaturePlot(object = inmat, features =c("insb"), label=FALSE, raster=FALSE, min.cutoff = 0)
#+end_src

#+RESULTS:
** Main markers dotplot
*** NPCs
#+begin_src R :results output
npcs_markers <- atlases_cluster_markers[
  c(grep("NPCs", names(atlases_cluster_markers)),
    grep("NE", names(atlases_cluster_markers)))]
#+end_src

#+RESULTS:

#+begin_src R :results output
npcs_markers <- map(npcs_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
npcs_markers <- map(npcs_markers, ~slice_max(.x, n = 14, order_by = avg_log2FC))
#+end_src

#+RESULTS:


Gather Markers and add markers that pass our treshold but are not topN
#+begin_src R :results output
mks <- c()
for (i in 1:length(npcs_markers)){
  mks <- c(mks, npcs_markers[[i]]$gene)
  if (i == 1) {mks <- c(mks, "tap", "dap", "Phs")}
  if (i == 2) {mks <- c(mks, "erm")}
  if (i == 5) {mks <- c(mks, "pnt", "tll")}
}
mks <- unique(mks)
#+end_src

#+RESULTS:


#+begin_src R :results graphics file :file ./npcs_markers_main_dotplot_top16.pdf :width 20 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./npcs_markers_main_dotplot_top16.pdf]]
*** Immats
#+begin_src R :results output
immat_markers <- atlases_cluster_markers[
  grep("Immat", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
immat_markers <- map(immat_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
immat_markers <- map(immat_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
immat_markers <- map(immat_markers, ~slice_max(.x, n = 9, order_by = avg_log2FC))
#+end_src

#+RESULTS:


Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(immat_markers)){
  mks <- c(mks, immat_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:


Add genes asked by Marta
#+begin_src R :results output
mks <- append(mks, values=c("ewg", "CG12643", "CG11030", "CG11294"), after=47)
mks <- append(mks, values=c("CG9016"), after=56)
#+end_src




#+begin_src R :results graphics file :file ./immat_markers_main_dotplot_top9.pdf :width 20 :height 15
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./immat_markers_main_dotplot_top9.pdf]]

** Supplementary marker plots
*** Immature

#+begin_src R :results output
immat_markers <- atlases_cluster_markers[grep("Immat", names(atlases_cluster_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
immat_markers <- map(immat_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
immat_markers <- map(immat_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(immat_markers)){
  mks <- c(mks, immat_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./immat_subclass_markers_dotplot.pdf :width 30 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./immat_subclass_markers_dotplot.pdf]]
*** Immature among
#+begin_src R :results output
immats <- subset(inmat, idents=c("0 Immature N", # 0
                     "9 Immature N", # 9
                     "14 Immature N", # 14
                     "16 Immature N", # 16
                     "17 Immature N", # 17
                     "19 Immature N", # 19
                     "29 Immature N", # 29
                     "30 Immature N", # 30
                     "33 Immature N", # 33
                     "34 Immature N", # 34
                     "37 Immature N", # 37
                     "51 Immature N"))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(immats) <- "RNA"
subclass.markers <- FindAllMarkers(object = immats, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "Immat_neurons.among_pct20.xlsx")
#+end_src

#+RESULTS:

#+begin_src R :results output
subclass.markers <- read_all_sheets("Immat_neurons.among_pct20.xlsx")
#+end_src

#+RESULTS:

Unsplit
#+begin_src R :results silent
subclass.markers <- bind_rows(subclass.markers, .id = "column_label")
#+end_src


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./Immat_among_markers_dotplot.pdf :width 55 :height 15
DotPlot(atlases, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./Immat_among_markers_dotplot.pdf]]

*** NPCs + NE
#+begin_src R :results output
npcs_markers <- atlases_cluster_markers[
  c(grep("NPCs", names(atlases_cluster_markers)),
  grep("NE-OL", names(atlases_cluster_markers)),
  grep("NE-Tch", names(atlases_cluster_markers)))
  ]
#+end_src

#+RESULTS:


#+begin_src R :results output
npcs_markers <- map(npcs_markers, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:

#+begin_src R :results output
npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(npcs_markers)){
  mks <- c(mks, npcs_markers[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./npcs_subclass_markers_dotplot.pdf :width 45 :height 15
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./npcs_subclass_markers_dotplot.pdf]]
** NPCs + NE among
#+begin_src R :results output
npcs <- subset(inmat, idents=c(
                          "5 NPCs ",  # 5
                          "2 NPCs",       # 2
                          "40 NPCs",       # 40
                          "41 NPCs",       # 41
                          "11 NPCs",       # 11
                          "15 NPCs/NE",    # 15
                          "42 NPCs/NE"    # 42
                          ))
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(npcs) <- "RNA"
subclass.markers <- FindAllMarkers(object = npcs, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.2, min.diff.pct = 0.1, verbose = TRUE, return.thresh = 0.0501, only.pos = TRUE)
#+end_src

#+RESULTS:

Append the Flybase snapshot description
#+BEGIN_SRC R :results output
subclass.markers <- left_join(subclass.markers, snaps, by = c("gene" = "GeneSymbol"), copy = TRUE)
#+END_SRC

#+RESULTS:

Save Markers
#+begin_src R :results silent
subclass.markers_list <- split(subclass.markers, subclass.markers$cluster)
write.xlsx(subclass.markers_list, file = "npcs.among_pct20.xlsx")
#+end_src

#+RESULTS:

#+begin_src R :results output
subclass.markers_list <- read_all_sheets("npcs.among_pct20.xlsx")
#+end_src

#+RESULTS:

#+begin_src R :results output
subclass.markers <- map_df(subclass.markers_list, rbind)
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
top <- subclass.markers %>% group_by(cluster) %>%  slice_max(n = 40, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./npcs_among_markers_dotplot.pdf :width 40 :height 7
DotPlot(, features = unique(top$gene),  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./npcs_among_markers_dotplot.pdf]]

** NPCs pairwise temporal per cluster
#+begin_src R :results output
DefaultAssay(atlases) <- "RNA"
Idents(object = atlases) <- "seurat_clusters"
atlases
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 131077 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap

#+end_src

#+begin_src R :results output
npcs_clusters <- c(2, 11, 15, 40, 41, 42)
#+end_src

#+RESULTS:

#+begin_src R :results output
npcs <- subset(atlases, idents = npcs_clusters)
#+end_src

#+RESULTS:


#+begin_src R :results output
DefaultAssay(npcs) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
clustids <- levels(Idents(npcs))
wilcox.markers <- list()

for (i in 1:length(clustids)) {
   this_cluster.seu <- subset(npcs, idents = clustids[i])
   Idents(object = this_cluster.seu) <- "stage"
   try(wilcox.markers[[clustids[i]]] <-
   as.data.frame(FindMarkers(this_cluster.seu, ident.1= "24h", ident.2="1h", logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, assay = "RNA", verbose = FALSE, return.thresh = 0.0501, only.pos = TRUE)))
   wilcox.markers[[clustids[i]]]$gene <- rownames(wilcox.markers[[clustids[i]]])
}
#+end_src

#+RESULTS:

Save Markers
#+begin_src R :results silent
write.xlsx(wilcox.markers, file = "24h_vs_1h_npcs_classes.DE.markers_stage_wilcox.xlsx", overwrite=TRUE)
#+end_src

* Fig 5 Pseudotime analysis
#+begin_src R :results silent
library(monocle3)
#+end_src
** Seurat wrappers
#+begin_src R :results output
.libPaths("./r_packages")
#+end_src

#+RESULTS:

#+begin_src R :results output
remotes::install_github('tfrayner/seurat-wrappers', ref='monocle3-conversion-bugfix')
#+end_src

** Monocle pipeline
*** Calculate pseudotime
#+begin_src R :results output
cds <- as.cell_data_set(inmat)
#+end_src

#+begin_src R :results output
cds <- cluster_cells(cds)
#+end_src


#+begin_src R :results output
cds <- learn_graph(cds)
#+end_src


Choose root cells
#+begin_src R :results output
max.N <- which.max(unlist(FetchData(inmat, "CycE")))
max.N <- colnames(inmat)[max.N]
#+end_src

#+RESULTS:

#+begin_src R :results output
cds <- order_cells(cds, root_cells = max.N)
#+end_src

#+RESULTS:

*** UMAP

#+begin_src R :results graphics file :file ./inmat_loadings_umap.png :width 1000 :height 1000
VizDimLoadings(inmat, reduction="umap")
#+end_src


#+begin_src R :results graphics file :file ./inmat_pseudotime_umap.png :width 1000 :height 1000
plot_cells(cds, color_cells_by = "pseudotime", label_cell_groups = FALSE, label_leaves = FALSE, label_branch_points = FALSE)
#+end_src
*** Genes


#+begin_src R :results output
cds_pr_test_res <- graph_test(cds, neighbor_graph="principal_graph", cores=8)
#+end_src
* Fig 6 Temporal L1->L3
** Temporal analysis
Wilcoxon for all clusters per stage
#+begin_src R :results output
DefaultAssay(atlases) <- "RNA"
Idents(object = atlases) <- "named_clusters"
clustids <- levels(Idents(atlases))
wilcox.markers <- list()

for (i in 1:length(clustids)) {
   this_cluster.seu <- subset(atlases, idents = clustids[i])
   Idents(object = this_cluster.seu) <- "stage"
   try(wilcox.markers[[clustids[i]]] <-
   as.data.frame(FindAllMarkers(this_cluster.seu, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, assay = "RNA", verbose = FALSE, return.thresh = 0.0501, only.pos = TRUE)))
}
#+end_src

#+RESULTS:


Save Markers
#+begin_src R :results silent
write.xlsx(wilcox.markers, file = "atlases.DE.markers_stage_wilcox.xlsx", overwrite=TRUE)
#+end_src


Load makers
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_temp_markers <- read_all_sheets("atlases.DE.markers_stage_wilcox.xlsx")
#+end_src

#+RESULTS:
: Warning messages:
: 1: No data found on worksheet.
:
: 2: No data found on worksheet.
:
: 3: No data found on worksheet.


*** NPCs dotplot
#+begin_src R :results output
npcs_markers <- atlases_temp_markers[
  c(grep("NPCs", names(atlases_temp_markers)),
  grep("Neuro-Epi OL", names(atlases_temp_markers)),
  grep("Neuroepi Trachea", names(atlases_temp_markers)))
  ]
#+end_src

#+RESULTS:


#+begin_src R :results output
for (i in 1:length(npcs_markers)){
npcs_markers[[i]] <- npcs_markers[[i]] %>% group_by(cluster) %>%
    slice_max(n = 5, order_by = avg_log2FC)}
#+end_src

#+RESULTS:

#+begin_src R :results output
#npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks1h <- c()
mks24h <- c()
mks48h <- c()
for (i in 1:length(npcs_markers)){
  mks1h <- c(mks1h, npcs_markers[[i]][npcs_markers[[i]]$cluster == "1h",]$gene)
  mks24h <- c(mks24h, npcs_markers[[i]][npcs_markers[[i]]$cluster == "24h",]$gene)
  mks48h <- c(mks48h, npcs_markers[[i]][npcs_markers[[i]]$cluster == "48h",]$gene)
}
mks <- unique(c(mks1h, mks24h, mks48h))
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./npcs_temp_markers_dotplot_top5.pdf :width 10 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./npcs_temp_markers_dotplot_top5.pdf]]
*** Mature
#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c("1 Cholinergic N",
                     "3 Cholinergic N",
                     "4 Cholinergic N",
                     "20 Cholinergic N",
                     "31 Cholinergic N",
                     "39 Cholinergic N",
                     "45 Cholinergic N",
                     "12 KC N",
                     "24 KC N",
                     "59 KC N",
                     "6 GABAergic N",
                     "7 GABAergic N",
                     "21 GABAergic N",
                     "10 Glutamatergic N",
                     "25 Glutamatergic N",
                     "22 Motorneurons",
                     "44 Peptidergic N",
                     "49 Peptidergic IPCs",
                     "53 Peptidergic N",
                     "62 Peptidergic N",
                     "64 Peptidergic N",
                     "43 Dopaminergic N",
                     "57 Serotoninergic N",
                     "65 Serotoninergic N",
                     "61 Octopaminergic N",
                     "63 Octopaminergic N",
                     "13 Undet N",
                     "18 Undet N",
                     "23 Undet N",
                     "36 Undet N",
                     "46 Undet N",
                     "54 Undet N")]

#+end_src

#+RESULTS:


#+begin_src R :results output
for (i in 1:length(matneu_markers)){
matneu_markers[[i]] <- matneu_markers[[i]] %>% group_by(cluster) %>%
    slice_max(n = 10, order_by = avg_log2FC)}
#+end_src

#+RESULTS:

#+begin_src R :results output
#npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks1h <- c()
mks24h <- c()
mks48h <- c()
for (i in 1:length(matneu_markers)){
  mks1h <- c(mks1h, matneu_markers[[i]][matneu_markers[[i]]$cluster == "1h",]$gene)
  mks24h <- c(mks24h, matneu_markers[[i]][matneu_markers[[i]]$cluster == "24h",]$gene)
  mks48h <- c(mks48h, matneu_markers[[i]][matneu_markers[[i]]$cluster == "48h",]$gene)
}
mks <- unique(c(mks1h, mks24h, mks48h))
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./matneu_temp_markers_dotplot.pdf :width 50 :height 15
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./matneu_temp_markers_dotplot.pdf]]
*** Immature
#+begin_src R :results output
immat_markers <- atlases_temp_markers[
  grep("Immat", names(atlases_temp_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
for (i in 1:length(immat_markers)){
immat_markers[[i]] <- immat_markers[[i]] %>% group_by(cluster) %>%
    slice_max(n = 15, order_by = avg_log2FC)}
#+end_src

#+RESULTS:

#+begin_src R :results output
#npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks1h <- c()
mks24h <- c()
mks48h <- c()
for (i in 1:length(immat_markers)){
  mks1h <- c(mks1h, immat_markers[[i]][immat_markers[[i]]$cluster == "1h",]$gene)
  mks24h <- c(mks24h, immat_markers[[i]][immat_markers[[i]]$cluster == "24h",]$gene)
  mks48h <- c(mks48h, immat_markers[[i]][immat_markers[[i]]$cluster == "48h",]$gene)
}
mks <- unique(c(mks1h, mks24h, mks48h))
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./immat_temp_markers_dotplot.pdf :width 45 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./immat_temp_markers_dotplot.pdf]]
*** Glia
#+begin_src R :results output
glia_markers <- atlases_temp_markers[
  c(grep("Glia", names(atlases_temp_markers)),
  grep("Hemocytes", names(atlases_temp_markers)),
  grep("Lymph", names(atlases_temp_markers)),
  grep("Ring Gland", names(atlases_temp_markers)))
  ]

#+end_src

#+RESULTS:


#+begin_src R :results output
for (i in 1:length(glia_markers)){
glia_markers[[i]] <- glia_markers[[i]] %>% group_by(cluster) %>%
    slice_max(n = 15, order_by = avg_log2FC)}
#+end_src

#+RESULTS:

#+begin_src R :results output
#npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks1h <- c()
mks24h <- c()
mks48h <- c()
for (i in 1:length(glia_markers)){
  mks1h <- c(mks1h, glia_markers[[i]][glia_markers[[i]]$cluster == "1h",]$gene)
  mks24h <- c(mks24h, glia_markers[[i]][glia_markers[[i]]$cluster == "24h",]$gene)
  mks48h <- c(mks48h, glia_markers[[i]][glia_markers[[i]]$cluster == "48h",]$gene)
}
mks <- unique(c(mks1h, mks24h, mks48h))
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./glia_temp_markers_dotplot.pdf :width 45 :height 10
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia_temp_markers_dotplot.pdf]]
*** KCs
#+begin_src R :results output
kcs_markers <- atlases_temp_markers[
   grep("KC", names(atlases_temp_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
for (i in 1:length(kcs_markers)){
kcs_markers[[i]] <- kcs_markers[[i]] %>% group_by(cluster) %>%
    slice_max(n = 30, order_by = avg_log2FC)}
#+end_src

#+RESULTS:

#+begin_src R :results output
#npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks1h <- c()
mks24h <- c()
mks48h <- c()
for (i in 1:length(kcs_markers)){
  mks1h <- c(mks1h, kcs_markers[[i]][kcs_markers[[i]]$cluster == "1h",]$gene)
  mks24h <- c(mks24h, kcs_markers[[i]][kcs_markers[[i]]$cluster == "24h",]$gene)
  mks48h <- c(mks48h, kcs_markers[[i]][kcs_markers[[i]]$cluster == "48h",]$gene)
}
mks <- unique(c(mks1h, mks24h, mks48h))
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./kcs_temp_markers_dotplot.pdf :width 45 :height 10
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./kcs_temp_markers_dotplot.pdf]]

** Temporal analysis collapsed
Collapse identities
#+begin_src R :results output
Idents(atlases) <- "seurat_clusters"
new.cluster.ids <- c("Immat N",
                     "Chol N",
                     "NPCs",
                     "Chol N",
                     "Chol N",
                     "Immat N",
                     "GABA N",
                     "GABA N",
                     "Immat N",
                     "Glut N",
                     "NPCs",
                     "KCs N",
                     "Undet N",
                     "Immat N",
                     "NE-OL",
                     "Immat N",
                     "Immat N",
                     "Undet N",
                     "Immat N",
                     "Chol N",
                     "GABA N",
                     "Motor N",
                     "Undet N",
                     "KCs N",
                     "Glut N",
                     "Glia",
                     "Glia",
                     "Hemos",
                     "Immat N",
                     "Immat N",
                     "Chol N",
                     "Immat N",
                     "Immat N",
                     "Glia",
                     "Undet N",
                     "Immat N",
                     "Glia",
                     "Chol N",
                     "NPCs",
                     "NPCs",
                     "NE-Tch",
                     "Dopa N",
                     "Pept N",
                     "Chol N",
                     "Undet N",
                     "Pept N",
                     "Glia",
                     "Immat N",
                     "Glia",
                     "Pept N",
                     "Undet N",
                     "Hemos",
                     "Hemos",
                     "Serot N",
                     "Glia",
                     "KCs N",
                     "Octop N",
                     "Pept N",
                     "Octop N",
                     "Pept N",
                     "Serot N",
                     "RGL")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:



Wilcoxon for all clusters per stage
#+begin_src R :results output
DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
clustids <- levels(Idents(atlases))
wilcox.markers <- list()

for (i in 1:length(clustids)) {
   this_cluster.seu <- subset(atlases, idents = clustids[i])
   Idents(object = this_cluster.seu) <- "stage"
   try(wilcox.markers[[clustids[i]]] <-
   as.data.frame(FindAllMarkers(this_cluster.seu, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, assay = "RNA", verbose = FALSE, return.thresh = 0.0501, only.pos = TRUE)))
}
#+end_src

#+RESULTS:


Save Markers
#+begin_src R :results silent
write.xlsx(wilcox.markers, file = "atlases.colapsed.DE.markers_stage_wilcox.xlsx", overwrite=TRUE)
#+end_src


Read markers
#+begin_src R :results output
DE_markers <- read_all_sheets("atlases.colapsed.DE.markers_stage_wilcox.xlsx")
#+end_src

#+RESULTS:

*** NPCs dotplot
#+begin_src R :results output
npcs_markers <- DE_markers[
  #c(grep("NPCs", names(DE_markers)),
  #grep("NE-OL", names(DE_markers)),
  #grep("NE-Tch", names(DE_markers)))
  grep("NPCs", names(DE_markers))
  ]
#+end_src

#+RESULTS:

They are really 1 class
#+begin_src R :results output
npcs_markers  <-  map_df(npcs_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
npcs_markers <- npcs_markers %>%
                group_by(cluster) %>%
                slice_max(n = 20, order_by = avg_log2FC)
#+end_src

#+RESULTS:

Add NE markers
#+begin_src R :results output
NE_markers <- DE_markers[
  c(grep("NE-OL", names(DE_markers)),
  grep("NE-Tch", names(DE_markers)))
  ]
#+end_src

#+RESULTS:

#+begin_src R :results output
NE_markers  <-  map_df(NE_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:
Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
NE_markers <- NE_markers %>%
                group_by(cluster) %>%
                slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


#+begin_src R :results output
npcs_markers <- rbind(npcs_markers, NE_markers) %>% group_by(cluster) %>% arrange(desc(avg_log2FC), .by_group=TRUE)
#+end_src

#+RESULTS:


#+begin_src R :results output
#npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- unique(npcs_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 60

#+begin_src R :results graphics file :file ./npcs_temp_markers_dotplot_top5.pdf :width 20 :height
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./npcs_temp_markers_dotplot_top5.pdf]]
*** Mature
**** Cholinergic

#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c("1 Cholinergic N",
                     "3 Cholinergic N",
                     "4 Cholinergic N",
                     "20 Cholinergic N",
                     "31 Cholinergic N",
                     "39 Cholinergic N",
                     "45 Cholinergic N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 30, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 58



#+begin_src R :results graphics file :file ./chol_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./chol_temp_markers_dotplot_top20.pdf]]
**** Gabargic
#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c(
                     "6 GABAergic N",
                     "7 GABAergic N",
                     "21 GABAergic N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 30, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 63




#+begin_src R :results graphics file :file ./gaba_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./gaba_temp_markers_dotplot_top20.pdf]]

**** Glutamatergic
#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c(
                     "10 Glutamatergic N",
                     "25 Glutamatergic N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 25, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 63



#+begin_src R :results graphics file :file ./glut_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glut_temp_markers_dotplot_top20.pdf]]
**** KCs
#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c(
                     "12 KC N",
                     "24 KC N",
                     "59 KC N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 25, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 62



#+begin_src R :results graphics file :file ./KCs_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./KCs_temp_markers_dotplot_top20.pdf]]

*** Immature
#+begin_src R :results output
immat_markers <- atlases_temp_markers[
  grep("Immat", names(atlases_temp_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
markers  <-  map_df(immat_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
markers <- markers %>%
                group_by(cluster) %>%
                slice_max(n = 25, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 58

#+begin_src R :results graphics file :file ./immat_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./immat_temp_markers_dotplot_top20.pdf]]
*** Glia
#+begin_src R :results output
glia_markers <- atlases_temp_markers[
  c(grep("Glia", names(atlases_temp_markers)),
  grep("Hemocytes", names(atlases_temp_markers)),
  grep("Lymph", names(atlases_temp_markers)),
  grep("Ring Gland", names(atlases_temp_markers)))
  ]

#+end_src

#+RESULTS:


#+begin_src R :results output
markers  <-  map_df(glia_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
markers <- markers %>%
                group_by(cluster) %>%
                slice_max(n = 26, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 58

#+begin_src R :results graphics file :file ./glia_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia_temp_markers_dotplot_top20.pdf]]

** Gene centric differential expression
#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_cluster_de <- read_all_sheets("atlases.DE.markers_stage_wilcox.xlsx")
#+end_src

#+RESULTS:
: Warning messages:
: 1: No data found on worksheet.
:
: 2: No data found on worksheet.
:
: 3: No data found on worksheet.


Gather in one df
#+begin_src R :results outputs
atlases_cluster_de <- map_df(atlases_cluster_de, rbind, .id="clustern")
#+end_src

#+RESULTS:

#+begin_src R :results output
names(atlases_cluster_de)[7] <- "time"
head(atlases_cluster_de)
#+end_src

#+RESULTS:
#+begin_example
   clustern         p_val avg_log2FC pct.1 pct.2     p_val_adj time
1 0 Immat N  0.000000e+00   4.914677 0.776 0.049  0.000000e+00   1h
2 0 Immat N  0.000000e+00   4.622652 0.943 0.277  0.000000e+00   1h
3 0 Immat N 1.535380e-305   3.790673 0.560 0.057 1.745727e-301   1h
4 0 Immat N 1.101352e-263   3.870380 0.539 0.065 1.252237e-259   1h
5 0 Immat N 2.176160e-216   3.642327 0.633 0.138 2.474294e-212   1h
6 0 Immat N 3.191062e-211   3.232481 0.407 0.041 3.628237e-207   1h
            gene
1           Thor
2             ps
3         CG1572
4 lncRNA:CR43334
5         Tsp66E
6            CBP
#+end_example


Add a column with cluster number
#+begin_src R :results output
atlases_cluster_de$clusternum <- as.numeric(gsub("([0-9]+).*$", "\\1", atlases_cluster_de$clustern))
#+end_src

#+RESULTS:

Keep only the name in clustern
#+begin_src R :results output
atlases_cluster_de$clustern <-  gsub("([0-9]+\\s)", "", atlases_cluster_de$clustern)
#+end_src

#+RESULTS:

Filter the ones with < 1 avg_log2FC
#+begin_src R :results output
atlases_cluster_de <- atlases_cluster_de %>% filter(avg_log2FC >=1)
#+end_src

#+RESULTS:


We want to gather for each gene where (cluster) it is differentially expressed >=1 avg_log2FC per timepoint avg_log2FC
#+begin_src R :results output
de_1h <- atlases_cluster_de %>% filter(time == "1h") %>% arrange(gene)
#+end_src

#+RESULTS:

Save Markers
#+begin_src R :results silent
write.xlsx(de_1h, file = "1h_DE_genes.xlsx")
#+end_src

DE at 24h
#+begin_src R :results output
de_24h <- atlases_cluster_de %>% filter(time == "24h") %>% arrange(gene)
#+end_src

#+RESULTS:

Save Markers
#+begin_src R :results silent
write.xlsx(de_24h, file = "24h_DE_genes.xlsx")
#+end_src


48h
#+begin_src R :results output
de_48h <- atlases_cluster_de %>% filter(time == "48h") %>% arrange(gene)
#+end_src

#+RESULTS:

Save Markers
#+begin_src R :results silent
write.xlsx(de_48h, file = "48h_DE_genes.xlsx")
#+end_src

** Temporal analysis collapsed pair-wise
Collapse identities
#+begin_src R :results output
Idents(atlases) <- "seurat_clusters"
new.cluster.ids <- c("0 Immat N",
                     "Chol N",
                     "NPCs",
                     "Chol N",
                     "Chol N",
                     "Immat N",
                     "GABA N",
                     "GABA N",
                     "Immat N",
                     "Glut N",
                     "NPCs",
                     "KCs N",
                     "Undet N",
                     "Immat N",
                     "NPCs",
                     "Immat N",
                     "Immat N",
                     "Undet N",
                     "Immat N",
                     "Chol N",
                     "GABA N",
                     "Motor N",
                     "Undet N",
                     "KCs N",
                     "Glut N",
                     "Glia",
                     "Glia",
                     "Hemos",
                     "Immat N",
                     "Immat N",
                     "Chol N",
                     "Immat N",
                     "Immat N",
                     "Glia",
                     "Undet N",
                     "Immat N",
                     "Glia",
                     "Chol N",
                     "NPCs",
                     "NPCs",
                     "NPCs",
                     "Dopa N",
                     "Pept N",
                     "Chol N",
                     "Undet N",
                     "Pept N",
                     "Glia",
                     "Immat N",
                     "Glia",
                     "Pept N",
                     "Undet N",
                     "Hemos",
                     "Hemos",
                     "Serot N",
                     "Glia",
                     "KCs N",
                     "Octop N",
                     "Pept N",
                     "Octop N",
                     "Pept N",
                     "Serot N",
                     "RGL")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:



Wilcoxon for all clusters per stage
#+begin_src R :results output
## DefaultAssay(atlases) <- "RNA"
## #Idents(object = atlases) <- "named_clusters"
## clustids <- levels(Idents(atlases))
## wilcox.markers <- list()

## for (i in 1:length(clustids)) {
##    this_cluster.seu <- subset(atlases, idents = clustids[i])
##    Idents(object = this_cluster.seu) <- "stage"
##    try(wilcox.markers[[clustids[i]]] <-
##    as.data.frame(FindAllMarkers(this_cluster.seu, logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, assay = "RNA", verbose = FALSE, return.thresh = 0.0501, only.pos = TRUE)))
## }
#+end_src

#+RESULTS:

48h vs 1h
#+begin_src R :results output
#DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
clustids <- levels(Idents(atlases))
wilcox.markers <- list()

for (i in 1:length(clustids)) {
   skip_to_next <- FALSE
   this_cluster.seu <- subset(atlases, idents = clustids[i])
   Idents(object = this_cluster.seu) <- "stage"
   tryCatch(wilcox.markers[[clustids[i]]] <-
   FindMarkers(this_cluster.seu, ident.1="24h", ident.2="1h", logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, assay = "RNA", verbose = FALSE, return.thresh = 0.0501, only.pos = TRUE),
   error = function(e) { skip_to_next <- TRUE})
   wilcox.markers[[clustids[i]]]$gene <- rownames(wilcox.markers[[clustids[i]]])
   if(skip_to_next) { next }
}
#+end_src



Save Markers
#+begin_src R :results silent
write.xlsx(wilcox.markers, file = "Immat_non0_24h_vs_1h.DE.markers_stage_wilcox.xlsx", overwrite=TRUE)
#+end_src


Read markers
#+begin_src R :results output
DE_markers <- read_all_sheets("atlases.colapsed.DE.markers_stage_wilcox.xlsx")
#+end_src

#+RESULTS:

**** NPCs dotplot
#+begin_src R :results output
npcs_markers <- DE_markers[
  #c(grep("NPCs", names(DE_markers)),
  #grep("NE-OL", names(DE_markers)),
  #grep("NE-Tch", names(DE_markers)))
  grep("NPCs", names(DE_markers))
  ]
#+end_src

#+RESULTS:

They are really 1 class
#+begin_src R :results output
npcs_markers  <-  map_df(npcs_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
npcs_markers <- npcs_markers %>%
                group_by(cluster) %>%
                slice_max(n = 20, order_by = avg_log2FC)
#+end_src

#+RESULTS:

Add NE markers
#+begin_src R :results output
NE_markers <- DE_markers[
  c(grep("NE-OL", names(DE_markers)),
  grep("NE-Tch", names(DE_markers)))
  ]
#+end_src

#+RESULTS:

#+begin_src R :results output
NE_markers  <-  map_df(NE_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:
Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
NE_markers <- NE_markers %>%
                group_by(cluster) %>%
                slice_max(n = 5, order_by = avg_log2FC)
#+end_src

#+RESULTS:


#+begin_src R :results output
npcs_markers <- rbind(npcs_markers, NE_markers) %>% group_by(cluster) %>% arrange(desc(avg_log2FC), .by_group=TRUE)
#+end_src

#+RESULTS:


#+begin_src R :results output
#npcs_markers <- map(npcs_markers, ~filter(.x, pct.1 > 0.19))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- unique(npcs_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 60

#+begin_src R :results graphics file :file ./npcs_temp_markers_dotplot_top5.pdf :width 20 :height
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./npcs_temp_markers_dotplot_top5.pdf]]
**** Mature
***** Cholinergic

#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c("1 Cholinergic N",
                     "3 Cholinergic N",
                     "4 Cholinergic N",
                     "20 Cholinergic N",
                     "31 Cholinergic N",
                     "39 Cholinergic N",
                     "45 Cholinergic N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 30, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 58



#+begin_src R :results graphics file :file ./chol_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./chol_temp_markers_dotplot_top20.pdf]]
***** Gabargic
#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c(
                     "6 GABAergic N",
                     "7 GABAergic N",
                     "21 GABAergic N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 30, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 63




#+begin_src R :results graphics file :file ./gaba_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./gaba_temp_markers_dotplot_top20.pdf]]

***** Glutamatergic
#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c(
                     "10 Glutamatergic N",
                     "25 Glutamatergic N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 25, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 63



#+begin_src R :results graphics file :file ./glut_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glut_temp_markers_dotplot_top20.pdf]]
***** KCs
#+begin_src R :results output
matneu_markers <- atlases_temp_markers[c(
                     "12 KC N",
                     "24 KC N",
                     "59 KC N")]
#+end_src

#+RESULTS:


#+begin_src R :results output
matneu_markers  <-  map_df(matneu_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
matneu_markers <- matneu_markers %>%
                group_by(cluster) %>%
                slice_max(n = 25, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(matneu_markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 62



#+begin_src R :results graphics file :file ./KCs_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./KCs_temp_markers_dotplot_top20.pdf]]

**** Immature
#+begin_src R :results output
immat_markers <- atlases_temp_markers[
  grep("Immat", names(atlases_temp_markers))]
#+end_src

#+RESULTS:


#+begin_src R :results output
markers  <-  map_df(immat_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
markers <- markers %>%
                group_by(cluster) %>%
                slice_max(n = 25, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 58

#+begin_src R :results graphics file :file ./immat_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./immat_temp_markers_dotplot_top20.pdf]]
**** Glia
#+begin_src R :results output
glia_markers <- atlases_temp_markers[
  c(grep("Glia", names(atlases_temp_markers)),
  grep("Hemocytes", names(atlases_temp_markers)),
  grep("Lymph", names(atlases_temp_markers)),
  grep("Ring Gland", names(atlases_temp_markers)))
  ]
#+end_src

#+RESULTS:


#+begin_src R :results output
markers  <-  map_df(glia_markers, rbind, .id="clustern")
#+end_src

#+RESULTS:


Here cluster refers to 1h, 24h or 48h
#+begin_src R :results output
markers <- markers %>%
                group_by(cluster) %>%
                slice_max(n = 26, order_by = avg_log2FC)
#+end_src

#+RESULTS:

#+begin_src R :results output
mks <- unique(markers$gene)
length(mks)
#+end_src

#+RESULTS:
: [1] 58

#+begin_src R :results graphics file :file ./glia_temp_markers_dotplot_top20.pdf :width 20 :height 5
Idents(atlases) <-"stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia_temp_markers_dotplot_top20.pdf]]
** Pairwise collapsed main figs (Late vs early)


48vs24
#+begin_src R :results output
DE_markers2 <- read_all_sheets("48_vs_24h.DE.markers_stage_wilcox.xlsx")
#+end_src

#+RESULTS:

*** Mature
#+begin_src R :results output
chols1 <- DE_markers1[["Chol N"]]
chols2 <- DE_markers2[["Chol N"]]
chols <- list("chols1"=chols1, "chols2"=chols2)
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
chols <- map(chols, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
chols <- map(chols, ~slice_max(.x, n = 46, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(chols)){
  mks <- c(mks, chols[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./Chol_late_vs_early_dotplot.pdf :width 20 :height 5
Idents(atlases) <- "stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./Chol_late_vs_early_dotplot.pdf]]
*** GABAergic
#+begin_src R :results output
gaba1 <- DE_markers1[["GABA N"]]
gaba2 <- DE_markers2[["GABA N"]]
gaba3 <- DE_markers3[["GABA N"]]
gabas <- list("gaba1"=gaba1, "gaba2"=gaba2, "gaba3"=gaba3)
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
gabas <- map(gabas, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
gabas <- map(gabas, ~slice_max(.x, n = 47, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(gabas)){
  mks <- c(mks, gabas[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./GABAs_late_vs_early_dotplot.pdf :width 20 :height 5
Idents(atlases) <- "stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./GABAs_late_vs_early_dotplot.pdf]]
*** Immature not Immat 0
24vs1
#+begin_src R :results silent
DE_markers1   <- read_all_sheets("Immat_non0_24h_vs_1h.DE.markers_stage_wilcox.xlsx")
DE_markers1 <- DE_markers1[["Immat N"]]
#+end_src

#+RESULTS:

48vs24
#+begin_src R :results silent
DE_markers2 <- read_all_sheets("Immat_non0_48h_vs_24h.DE.markers_stage_wilcox.xlsx")
DE_markers2 <- DE_markers2[["Immat N"]]
#+end_src

#+RESULTS:

48vs1
#+begin_src R :results silent
DE_markers3 <- read_all_sheets("Immat_non0_24h_vs_1h.DE.markers_stage_wilcox.xlsx")
DE_markers3 <- DE_markers3[["Immat N"]]
#+end_src

#+RESULTS:

#+begin_src R :results output
immats <- list("Immat1"=DE_markers1, "Immat2"=DE_markers2, "Immat3"=DE_markers3)
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
immats <- map(immats, ~filter(.x, avg_log2FC > 1))
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
immats <- map(immats, ~slice_max(.x, n = 60, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(immats)){
  mks <- c(mks, immats[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results graphics file :file ./Immats_non0_late_vs_early_dotplot.pdf :width 20 :height 5
Idents(atlases) <- "stage"
DotPlot(atlases, features = mks,  dot.scale = 5, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./Immats_non0_late_vs_early_dotplot.pdf]]
** Final

Here is what we will put in the temporal figure:

only 48 vs 24, but multiple rows for different subtypes

1 dotplot with glia - top 10 genes for each subtype

1 dot plot with neurons - KCs (pooled), cha (pooled), GABA, glut, octopaminergic, SER, DAT, peptidergic

1 dot plot for all immature pooled.

ONLY show > 0.5

#+begin_src R :results output
Idents(atlases) <- "seurat_clusters"
new.cluster.ids <- c("Immat N",
                     "Chol N",
                     "NA",
                     "Chol N",
                     "Chol N",
                     "Immat N",
                     "GABA N",
                     "GABA N",
                     "Immat N",
                     "Glut N",
                     "NA",
                     "KCs N",
                     "NA",
                     "Immat N",
                     "NA",
                     "Immat N",
                     "Immat N",
                     "NA",
                     "Immat N",
                     "Chol N",
                     "GABA N",
                     "NA",
                     "NA",
                     "KCs N",
                     "Glut N",
                     "Cortex G",
                     "Cortex G",
                     "NA",
                     "Immat N",
                     "Immat N",
                     "Chol N",
                     "Immat N",
                     "Immat N",
                     "Enshea G",
                     "Undet N",
                     "Immat N",
                     "Enshea G",
                     "Chol N",
                     "NA",
                     "NA",
                     "NA",
                     "Dopa N",
                     "Pept N",
                     "Chol N",
                     "Undet N",
                     "Pept N",
                     "Astro G",
                     "Immat N",
                     "Cortex G",
                     "Pept N",
                     "Undet N",
                     "Surf G",
                     "NA",
                     "Serot N",
                     "Astro G",
                     "KCs N",
                     "Octop N",
                     "Pept N",
                     "Octop N",
                     "Pept N",
                     "Serot N",
                     "NA")
names(new.cluster.ids) <- levels(atlases)
atlases <- RenameIdents(atlases, new.cluster.ids)
#+end_src

#+RESULTS:



#+begin_src R :results output
DefaultAssay(atlases) <- "RNA"
#Idents(object = atlases) <- "named_clusters"
clustids <- levels(Idents(atlases))
wilcox.markers <- list()

for (i in 1:length(clustids)) {
   this_cluster.seu <- subset(atlases, idents = clustids[i])
   Idents(object = this_cluster.seu) <- "stage"
   try(wilcox.markers[[clustids[i]]] <-
   as.data.frame(FindMarkers(this_cluster.seu, ident.1= "48h", ident.2="24h", logfc.threshold = 0.1, test.use = "wilcox", min.pct = 0.1, min.diff.pct = 0.1, assay = "RNA", verbose = FALSE, return.thresh = 0.0501, only.pos = TRUE)))
   wilcox.markers[[clustids[i]]]$gene <- rownames(wilcox.markers[[clustids[i]]])
}
#+end_src

#+RESULTS:

Save Markers
#+begin_src R :results silent
write.xlsx(wilcox.markers, file = "temporal_all.DE.markers_stage_wilcox.xlsx", overwrite=TRUE)
#+end_src


#+begin_src R :results output
mats <- wilcox.markers[c("Chol N", "GABA N", "KCs N", "Dopa N", "Pept N", "Serot N", "Octop N")]
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
mats <- map(mats, ~filter(.x, avg_log2FC > 0.5))
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
mats <- map(mats, ~slice_max(.x, n = 20, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(mats)){
  mks <- c(mks, mats[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:

#+begin_src R :results output
neu <- subset(atlases, idents=c("Chol N", "GABA N", "KCs N", "Dopa N", "Pept N", "Serot N", "Octop N"))
#+end_src

#+begin_src R :results graphics file :file ./neurons_late_vs_early_dotplot.pdf :width 20 :height 10
DotPlot(neu, features = mks,  dot.scale = 5, cols="RdBu", split.by="stage") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./neurons_late_vs_early_dotplot.pdf]]




Glia
#+begin_src R :results output
glias <- subset(atlases, idents=c("Cortex G", "Enshea G", "Astro G", "Surf G"))
#+end_src

#+RESULTS:

#+begin_src R :results output
glia <- wilcox.markers[c("Cortex G", "Enshea G", "Astro G", "Surf G")]
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
glia <- map(glia, ~filter(.x, avg_log2FC > 0.5))
#+end_src

#+RESULTS:



Choose cleanest
#+begin_src R :results output
glia <- map(glia, ~slice_max(.x, n = 27, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(glia)){
  mks <- c(mks, glia[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:



#+begin_src R :results graphics file :file ./glia_late_vs_early_dotplot.pdf :width 20 :height 10
DotPlot(glias, features = mks,  dot.scale = 5, cols="RdBu", split.by="stage") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./glia_late_vs_early_dotplot.pdf]]

Immatures
#+begin_src R :results output
immat <- subset(atlases, idents=c("Immat N"))
#+end_src

#+RESULTS:

#+begin_src R :results output
immats <- wilcox.markers[c("Immat N")]
#+end_src

#+RESULTS:

Choose cleanest
#+begin_src R :results output
immats <- map(immats, ~filter(.x, avg_log2FC > 0.5))
#+end_src

#+RESULTS:


Choose cleanest
#+begin_src R :results output
immats <- map(immats, ~slice_max(.x, n = 60, order_by = avg_log2FC))
#+end_src

#+RESULTS:

Gather Markers
#+begin_src R :results output
mks <- c()
for (i in 1:length(immats)){
  mks <- c(mks, immats[[i]]$gene)
}
mks <- unique(mks)
#+end_src

#+RESULTS:



#+begin_src R :results graphics file :file ./immats_late_vs_early_dotplot.pdf :width 20 :height 10
DotPlot(immat, features = mks,  dot.scale = 5, cols="RdBu", split.by="stage") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./immats_late_vs_early_dotplot.pdf]]

* Fig 7 IPCs
   Subset peptidergics
   #+begin_src R :results output
   peptis <- subset(matneu, idents=  c("44 Peptidergic N", "49 Peptidergic IPCs", "53 Peptidergic N", "62 Peptidergic N", "64 Peptidergic N"))
   #+end_src

   #+RESULTS:

Subset the cells expressing Ilps
#+begin_src R :results output
ipcs <- subset(peptis, subset= Ilp2 > 1 | Ilp3 > 1 | Ilp5 > 1)
ipcs
#+end_src

#+RESULTS:
: An object of class Seurat
: 16370 features across 487 samples within 2 assays
: Active assay: RNA (11370 features, 0 variable features)
:  1 other assay present: integrated
:  2 dimensional reductions calculated: pca, umap

*** IPCs
Dotplot
#+begin_src R :results graphics file :file ./IPCs_dotplot.png :width 1000 :height 1000
fts <- c("Ilp2", "Ilp3", "Ilp5", "AstC-R2")
DotPlot(ipcs, features = fts,  dot.scale = 4, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./IPCs_dotplot.png]]

#+begin_src R :results graphics file :file ./IPCs_dotplot.pdf :width 10 :height 5
fts <- c("Ilp2", "Ilp3", "Ilp5", "AstC-R2")
DotPlot(ipcs, features = fts,  dot.scale = 6, cols="RdBu") + RotatedAxis()
#+end_src

#+RESULTS:
[[file:./IPCs_dotplot.pdf]]
* Finding most selective markers

#+begin_src R :results output
read_all_sheets = function(xlsxFile, ...) {
  sheet_names = openxlsx::getSheetNames(xlsxFile)
  sheet_list = as.list(rep(NA, length(sheet_names)))
  names(sheet_list) = sheet_names
  for (sn in sheet_names) {
    sheet_list[[sn]] = openxlsx::read.xlsx(xlsxFile, sheet=sn, ...)
  }
  return(sheet_list)
}
#+end_src

#+RESULTS:


#+begin_src R :results output
atlases_cluster_de <- read_all_sheets("atlases_rPCA.markers_67.xlsx")
#+end_src

#+RESULTS:


Gather in one df
#+begin_src R :results outputs
atlases_cluster_de <- map_df(atlases_cluster_de, rbind, .id="clustern")
#+end_src

#+RESULTS:

FC >= 0.75 pct.1 19%
#+begin_src R :results output
top_classes_selective <- atlases_cluster_de %>%
  group_by(gene) %>%
  filter(avg_log2FC >= 0.75 & pct.1 > 0.19) %>%
  summarize(ndist = n_distinct(clustern)) %>%
  arrange(ndist) %>%
  filter(ndist <= 1) %>%
  as.data.frame()
#+end_src

#+RESULTS:

#+begin_src R :results output
one_class <- atlases_cluster_de[atlases_cluster_de$gene %in% top_classes_selective$gene,]
#+end_src

#+RESULTS:

#+begin_src R :results silent
one_class <- split(one_class, one_class$clustern)
write.xlsx(one_class, file = "selective-one_class_075-19.xlsx")
#+end_src

